
FreeRTOS_Assignment2_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d8  080045d8  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000055d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080045e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006064  2**0
                  CONTENTS
 10 .bss          00003f50  20000064  20000064  00006064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003fb4  20003fb4  00006064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4d0  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f0  00000000  00000000  00015564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00017a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b47  00000000  00000000  000188d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222b7  00000000  00000000  00019417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010381  00000000  00000000  0003b6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23e1  00000000  00000000  0004ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011de30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004108  00000000  00000000  0011de74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00121f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004534 	.word	0x08004534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004534 	.word	0x08004534

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vUsartTx_Task1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vUsartTx_Task1(void *vpParam)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	char str[32];
	int count = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	portTickType wakeupTime1 = xTaskGetTickCount();
 800057c:	f002 fc90 	bl	8002ea0 <xTaskGetTickCount>
 8000580:	4603      	mov	r3, r0
 8000582:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		sprintf(str, "Count1: %d\r\n", count++);
 8000584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800058a:	f107 000c 	add.w	r0, r7, #12
 800058e:	461a      	mov	r2, r3
 8000590:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <vUsartTx_Task1+0x54>)
 8000592:	f003 fad9 	bl	8003b48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe18 	bl	80001d0 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <vUsartTx_Task1+0x58>)
 80005ae:	f001 fd31 	bl	8002014 <HAL_UART_Transmit>
		vTaskDelayUntil(&wakeupTime1, 1000 / portTICK_RATE_MS);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 faec 	bl	8002b98 <xTaskDelayUntil>
		sprintf(str, "Count1: %d\r\n", count++);
 80005c0:	bf00      	nop
 80005c2:	e7df      	b.n	8000584 <vUsartTx_Task1+0x14>
 80005c4:	0800454c 	.word	0x0800454c
 80005c8:	20000080 	.word	0x20000080

080005cc <vUsartTx_Task2>:
	}
	vTaskDelete(NULL);
}

void vUsartTx_Task2(void *vpParam)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	char str[32];
	int count = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	portTickType wakeupTime2 = xTaskGetTickCount();
 80005d8:	f002 fc62 	bl	8002ea0 <xTaskGetTickCount>
 80005dc:	4603      	mov	r3, r0
 80005de:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		sprintf(str, "Count2: %d\r\n", count++);
 80005e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80005e6:	f107 000c 	add.w	r0, r7, #12
 80005ea:	461a      	mov	r2, r3
 80005ec:	490c      	ldr	r1, [pc, #48]	@ (8000620 <vUsartTx_Task2+0x54>)
 80005ee:	f003 faab 	bl	8003b48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fdea 	bl	80001d0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f107 010c 	add.w	r1, r7, #12
 8000604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <vUsartTx_Task2+0x58>)
 800060a:	f001 fd03 	bl	8002014 <HAL_UART_Transmit>
		vTaskDelayUntil(&wakeupTime2, 1000 / portTICK_RATE_MS);
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fabe 	bl	8002b98 <xTaskDelayUntil>
		sprintf(str, "Count2: %d\r\n", count++);
 800061c:	bf00      	nop
 800061e:	e7df      	b.n	80005e0 <vUsartTx_Task2+0x14>
 8000620:	0800455c 	.word	0x0800455c
 8000624:	20000080 	.word	0x20000080

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fa75 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f831 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8c3 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f897 	bl	800076c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ret = xTaskCreate(vUsartTx_Task1, "USART1", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2305      	movs	r3, #5
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	490f      	ldr	r1, [pc, #60]	@ (8000688 <main+0x60>)
 800064c:	480f      	ldr	r0, [pc, #60]	@ (800068c <main+0x64>)
 800064e:	f002 f951 	bl	80028f4 <xTaskCreate>
 8000652:	6078      	str	r0, [r7, #4]
  if(ret != pdTRUE)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d001      	beq.n	800065e <main+0x36>
	  Error_Handler();
 800065a:	f000 f8dd 	bl	8000818 <Error_Handler>

  ret = xTaskCreate(vUsartTx_Task2, "USART2", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2304      	movs	r3, #4
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	4909      	ldr	r1, [pc, #36]	@ (8000690 <main+0x68>)
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <main+0x6c>)
 800066e:	f002 f941 	bl	80028f4 <xTaskCreate>
 8000672:	6078      	str	r0, [r7, #4]
  if(ret != pdTRUE)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d001      	beq.n	800067e <main+0x56>
	  Error_Handler();
 800067a:	f000 f8cd 	bl	8000818 <Error_Handler>

  vTaskStartScheduler();
 800067e:	f002 fb0d 	bl	8002c9c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <main+0x5a>
 8000686:	bf00      	nop
 8000688:	0800456c 	.word	0x0800456c
 800068c:	08000571 	.word	0x08000571
 8000690:	08004574 	.word	0x08004574
 8000694:	080005cd 	.word	0x080005cd

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fa6e 	bl	8003b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	@ 0x32
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fcbd 	bl	800109c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f876 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f000 ff1e 	bl	800158c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f85f 	bl	8000818 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <MX_USART2_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000778:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f001 fbe6 	bl	8001f74 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f833 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000080 	.word	0x20000080
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_GPIO_Init+0x30>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <MX_GPIO_Init+0x30>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_GPIO_Init+0x30>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000806:	f000 f9ab 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010000 	.word	0x40010000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000838:	6453      	str	r3, [r2, #68]	@ 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <HAL_UART_MspInit+0x84>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12b      	bne.n	80008ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_UART_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <HAL_UART_MspInit+0x88>)
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_UART_MspInit+0x88>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_UART_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <HAL_UART_MspInit+0x88>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_UART_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ce:	230c      	movs	r3, #12
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008de:	2307      	movs	r3, #7
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_UART_MspInit+0x8c>)
 80008ea:	f000 fa3b 	bl	8000d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	@ 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <HAL_InitTick+0xd4>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091c:	4a2e      	ldr	r2, [pc, #184]	@ (80009d8 <HAL_InitTick+0xd4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6453      	str	r3, [r2, #68]	@ 0x44
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <HAL_InitTick+0xd4>)
 8000926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f001 f846 	bl	80019cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000940:	f001 f830 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8000944:	4603      	mov	r3, r0
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094c:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <HAL_InitTick+0xd8>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	3b01      	subs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <HAL_InitTick+0xdc>)
 800095a:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <HAL_InitTick+0xe0>)
 800095c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <HAL_InitTick+0xdc>)
 8000960:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000964:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <HAL_InitTick+0xdc>)
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <HAL_InitTick+0xdc>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <HAL_InitTick+0xdc>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_InitTick+0xdc>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800097e:	4818      	ldr	r0, [pc, #96]	@ (80009e0 <HAL_InitTick+0xdc>)
 8000980:	f001 f856 	bl	8001a30 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098e:	2b00      	cmp	r3, #0
 8000990:	d11b      	bne.n	80009ca <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000992:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <HAL_InitTick+0xdc>)
 8000994:	f001 f8a6 	bl	8001ae4 <HAL_TIM_Base_Start_IT>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d111      	bne.n	80009ca <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009a6:	2019      	movs	r0, #25
 80009a8:	f000 f9ce 	bl	8000d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d808      	bhi.n	80009c4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	2019      	movs	r0, #25
 80009b8:	f000 f9aa 	bl	8000d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_InitTick+0xe4>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e002      	b.n	80009ca <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	200000c8 	.word	0x200000c8
 80009e4:	40010000 	.word	0x40010000
 80009e8:	20000004 	.word	0x20000004

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a2a:	f001 f8cb 	bl	8001bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000c8 	.word	0x200000c8

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	@ (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f003 f8ec 	bl	8003c44 <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20020000 	.word	0x20020000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	20000110 	.word	0x20000110
 8000aa0:	20003fb8 	.word	0x20003fb8

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 f8ab 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd95 	bl	8000628 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b0c:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 8000b10:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b14:	20003fb4 	.word	0x20003fb4

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f8d8 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff feda 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe68 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000114 	.word	0x20000114

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000114 	.word	0x20000114

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e16b      	b.n	8001058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 815a 	bne.w	8001052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80b4 	beq.w	8001052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b60      	ldr	r3, [pc, #384]	@ (8001070 <HAL_GPIO_Init+0x30c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8001070 <HAL_GPIO_Init+0x30c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efa:	4b5d      	ldr	r3, [pc, #372]	@ (8001070 <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	4a5b      	ldr	r2, [pc, #364]	@ (8001074 <HAL_GPIO_Init+0x310>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a52      	ldr	r2, [pc, #328]	@ (8001078 <HAL_GPIO_Init+0x314>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d02b      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a51      	ldr	r2, [pc, #324]	@ (800107c <HAL_GPIO_Init+0x318>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x222>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a50      	ldr	r2, [pc, #320]	@ (8001080 <HAL_GPIO_Init+0x31c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x21e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	@ (8001084 <HAL_GPIO_Init+0x320>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001088 <HAL_GPIO_Init+0x324>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4d      	ldr	r2, [pc, #308]	@ (800108c <HAL_GPIO_Init+0x328>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001090 <HAL_GPIO_Init+0x32c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4b      	ldr	r2, [pc, #300]	@ (8001094 <HAL_GPIO_Init+0x330>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x20a>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00e      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f6e:	2308      	movs	r3, #8
 8000f70:	e00c      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00a      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f76:	2305      	movs	r3, #5
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	f002 0203 	and.w	r2, r2, #3
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	@ (8001074 <HAL_GPIO_Init+0x310>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a32      	ldr	r2, [pc, #200]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001022:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_GPIO_Init+0x334>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <HAL_GPIO_Init+0x334>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	f67f ae90 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	@ 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40013800 	.word	0x40013800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40021000 	.word	0x40021000
 800108c:	40021400 	.word	0x40021400
 8001090:	40021800 	.word	0x40021800
 8001094:	40021c00 	.word	0x40021c00
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e267      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d075      	beq.n	80011a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ba:	4b88      	ldr	r3, [pc, #544]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d00c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c6:	4b85      	ldr	r3, [pc, #532]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d112      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b82      	ldr	r3, [pc, #520]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010de:	d10b      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4b7e      	ldr	r3, [pc, #504]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d05b      	beq.n	80011a4 <HAL_RCC_OscConfig+0x108>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d157      	bne.n	80011a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e242      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x74>
 8001102:	4b76      	ldr	r3, [pc, #472]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a75      	ldr	r2, [pc, #468]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01d      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6f      	ldr	r2, [pc, #444]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6d      	ldr	r3, [pc, #436]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6c      	ldr	r2, [pc, #432]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001134:	4b69      	ldr	r3, [pc, #420]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a68      	ldr	r2, [pc, #416]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fd18 	bl	8000b88 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fd14 	bl	8000b88 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	@ 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e207      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b5b      	ldr	r3, [pc, #364]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xc0>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fd04 	bl	8000b88 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fd00 	bl	8000b88 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1f3      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	4b51      	ldr	r3, [pc, #324]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0xe8>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b2:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011be:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d11c      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e1c7      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4937      	ldr	r1, [pc, #220]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	e03a      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <HAL_RCC_OscConfig+0x244>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff fcb9 	bl	8000b88 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fcb5 	bl	8000b88 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1a8      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4925      	ldr	r1, [pc, #148]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_RCC_OscConfig+0x244>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fc98 	bl	8000b88 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fc94 	bl	8000b88 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e187      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d036      	beq.n	80012f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_RCC_OscConfig+0x248>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fc78 	bl	8000b88 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fc74 	bl	8000b88 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e167      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80012b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x200>
 80012ba:	e01b      	b.n	80012f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_RCC_OscConfig+0x248>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fc61 	bl	8000b88 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	e00e      	b.n	80012e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc5d 	bl	8000b88 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d907      	bls.n	80012e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e150      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b88      	ldr	r3, [pc, #544]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ea      	bne.n	80012ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8097 	beq.w	8001430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b81      	ldr	r3, [pc, #516]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10f      	bne.n	8001332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b7d      	ldr	r3, [pc, #500]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a7c      	ldr	r2, [pc, #496]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b7a      	ldr	r3, [pc, #488]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b77      	ldr	r3, [pc, #476]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133e:	4b74      	ldr	r3, [pc, #464]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a73      	ldr	r2, [pc, #460]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc1d 	bl	8000b88 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fc19 	bl	8000b88 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e10c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x2ea>
 8001378:	4b64      	ldr	r3, [pc, #400]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137c:	4a63      	ldr	r2, [pc, #396]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	@ 0x70
 8001384:	e01c      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x30c>
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001392:	4a5e      	ldr	r2, [pc, #376]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6713      	str	r3, [r2, #112]	@ 0x70
 800139a:	4b5c      	ldr	r3, [pc, #368]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139e:	4a5b      	ldr	r2, [pc, #364]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 80013a8:	4b58      	ldr	r3, [pc, #352]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ac:	4a57      	ldr	r2, [pc, #348]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b4:	4b55      	ldr	r3, [pc, #340]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b8:	4a54      	ldr	r2, [pc, #336]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0304 	bic.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbde 	bl	8000b88 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbda 	bl	8000b88 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0cb      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	4b49      	ldr	r3, [pc, #292]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ee      	beq.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fbc8 	bl	8000b88 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fbc4 	bl	8000b88 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0b5      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001412:	4b3e      	ldr	r3, [pc, #248]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ee      	bne.n	80013fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	4b39      	ldr	r3, [pc, #228]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	4a38      	ldr	r2, [pc, #224]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a1 	beq.w	800157c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143a:	4b34      	ldr	r3, [pc, #208]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d05c      	beq.n	8001500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d141      	bne.n	80014d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <HAL_RCC_OscConfig+0x478>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb98 	bl	8000b88 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb94 	bl	8000b88 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e087      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	491b      	ldr	r1, [pc, #108]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x478>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb6d 	bl	8000b88 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fb69 	bl	8000b88 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e05c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x416>
 80014d0:	e054      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_RCC_OscConfig+0x478>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb56 	bl	8000b88 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fb52 	bl	8000b88 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e045      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
 80014fe:	e03d      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e038      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000
 8001514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_RCC_OscConfig+0x4ec>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d028      	beq.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d121      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d11a      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800154e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001550:	4293      	cmp	r3, r2
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0cc      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b68      	ldr	r3, [pc, #416]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90c      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d044      	beq.n	80016ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d119      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b3f      	ldr	r3, [pc, #252]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e067      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4934      	ldr	r1, [pc, #208]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff fa84 	bl	8000b88 <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff fa80 	bl	8000b88 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e04f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d20c      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f8e6 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	08004584 	.word	0x08004584
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b094      	sub	sp, #80	@ 0x50
 800175e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001770:	4b79      	ldr	r3, [pc, #484]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d00d      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 800177c:	2b08      	cmp	r3, #8
 800177e:	f200 80e1 	bhi.w	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x34>
 8001786:	2b04      	cmp	r3, #4
 8001788:	d003      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x3a>
 800178a:	e0db      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b73      	ldr	r3, [pc, #460]	@ (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001790:	e0db      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001792:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x208>)
 8001794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001796:	e0d8      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001798:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	2200      	movs	r2, #0
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ca:	4622      	mov	r2, r4
 80017cc:	462b      	mov	r3, r5
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0159      	lsls	r1, r3, #5
 80017d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017dc:	0150      	lsls	r0, r2, #5
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4621      	mov	r1, r4
 80017e4:	1a51      	subs	r1, r2, r1
 80017e6:	6139      	str	r1, [r7, #16]
 80017e8:	4629      	mov	r1, r5
 80017ea:	eb63 0301 	sbc.w	r3, r3, r1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017fc:	4659      	mov	r1, fp
 80017fe:	018b      	lsls	r3, r1, #6
 8001800:	4651      	mov	r1, sl
 8001802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001806:	4651      	mov	r1, sl
 8001808:	018a      	lsls	r2, r1, #6
 800180a:	4651      	mov	r1, sl
 800180c:	ebb2 0801 	subs.w	r8, r2, r1
 8001810:	4659      	mov	r1, fp
 8001812:	eb63 0901 	sbc.w	r9, r3, r1
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182a:	4690      	mov	r8, r2
 800182c:	4699      	mov	r9, r3
 800182e:	4623      	mov	r3, r4
 8001830:	eb18 0303 	adds.w	r3, r8, r3
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	462b      	mov	r3, r5
 8001838:	eb49 0303 	adc.w	r3, r9, r3
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184a:	4629      	mov	r1, r5
 800184c:	024b      	lsls	r3, r1, #9
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001854:	4621      	mov	r1, r4
 8001856:	024a      	lsls	r2, r1, #9
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185e:	2200      	movs	r2, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001868:	f7fe fd0a 	bl	8000280 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001874:	e058      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	4611      	mov	r1, r2
 8001882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
 800188c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001890:	4642      	mov	r2, r8
 8001892:	464b      	mov	r3, r9
 8001894:	f04f 0000 	mov.w	r0, #0
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	0159      	lsls	r1, r3, #5
 800189e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a2:	0150      	lsls	r0, r2, #5
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4641      	mov	r1, r8
 80018aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ae:	4649      	mov	r1, r9
 80018b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c8:	ebb2 040a 	subs.w	r4, r2, sl
 80018cc:	eb63 050b 	sbc.w	r5, r3, fp
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	464b      	mov	r3, r9
 80018ec:	eb45 0303 	adc.w	r3, r5, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fe:	4629      	mov	r1, r5
 8001900:	028b      	lsls	r3, r1, #10
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001908:	4621      	mov	r1, r4
 800190a:	028a      	lsls	r2, r1, #10
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	61fa      	str	r2, [r7, #28]
 8001918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800191c:	f7fe fcb0 	bl	8000280 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800193a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001942:	e002      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800194c:	4618      	mov	r0, r3
 800194e:	3750      	adds	r7, #80	@ 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200

08001964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_RCC_GetHCLKFreq+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000

0800197c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001980:	f7ff fff0 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	@ (80019a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	08004594 	.word	0x08004594

080019a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a8:	f7ff ffdc 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0b5b      	lsrs	r3, r3, #13
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4903      	ldr	r1, [pc, #12]	@ (80019c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08004594 	.word	0x08004594

080019cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	220f      	movs	r2, #15
 80019da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	08db      	lsrs	r3, r3, #3
 8001a06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_RCC_GetClockConfig+0x60>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0207 	and.w	r2, r3, #7
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e041      	b.n	8001ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f839 	bl	8001ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f000 f9c0 	bl	8001df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d001      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e04e      	b.n	8001b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a23      	ldr	r2, [pc, #140]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d022      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b26:	d01d      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bac <HAL_TIM_Base_Start_IT+0xc8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d018      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d013      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00e      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a18      	ldr	r2, [pc, #96]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d111      	bne.n	8001b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d010      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b86:	e007      	b.n	8001b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00
 8001bb8:	40010400 	.word	0x40010400
 8001bbc:	40014000 	.word	0x40014000
 8001bc0:	40001800 	.word	0x40001800

08001bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d020      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0202 	mvn.w	r2, #2
 8001bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8d2 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8c4 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8d5 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d020      	beq.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0204 	mvn.w	r2, #4
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8ac 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f89e 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8af 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d020      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0208 	mvn.w	r2, #8
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f886 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f878 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f889 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d020      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0210 	mvn.w	r2, #16
 8001cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f860 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f852 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f863 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0201 	mvn.w	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd62 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00c      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f906 	bl	8001f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f834 	bl	8001de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0220 	mvn.w	r2, #32
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8d8 	bl	8001f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a46      	ldr	r2, [pc, #280]	@ (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e12:	d00f      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a43      	ldr	r2, [pc, #268]	@ (8001f24 <TIM_Base_SetConfig+0x130>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00b      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a42      	ldr	r2, [pc, #264]	@ (8001f28 <TIM_Base_SetConfig+0x134>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a41      	ldr	r2, [pc, #260]	@ (8001f2c <TIM_Base_SetConfig+0x138>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	@ (8001f30 <TIM_Base_SetConfig+0x13c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d108      	bne.n	8001e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a35      	ldr	r2, [pc, #212]	@ (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02b      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e54:	d027      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a32      	ldr	r2, [pc, #200]	@ (8001f24 <TIM_Base_SetConfig+0x130>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d023      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a31      	ldr	r2, [pc, #196]	@ (8001f28 <TIM_Base_SetConfig+0x134>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a30      	ldr	r2, [pc, #192]	@ (8001f2c <TIM_Base_SetConfig+0x138>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01b      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2f      	ldr	r2, [pc, #188]	@ (8001f30 <TIM_Base_SetConfig+0x13c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d017      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2e      	ldr	r2, [pc, #184]	@ (8001f34 <TIM_Base_SetConfig+0x140>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2d      	ldr	r2, [pc, #180]	@ (8001f38 <TIM_Base_SetConfig+0x144>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00f      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <TIM_Base_SetConfig+0x148>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00b      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <TIM_Base_SetConfig+0x14c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a2a      	ldr	r2, [pc, #168]	@ (8001f44 <TIM_Base_SetConfig+0x150>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a29      	ldr	r2, [pc, #164]	@ (8001f48 <TIM_Base_SetConfig+0x154>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d108      	bne.n	8001eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_Base_SetConfig+0xf8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <TIM_Base_SetConfig+0x13c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d103      	bne.n	8001ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f023 0201 	bic.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
  }
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	40014800 	.word	0x40014800
 8001f40:	40001800 	.word	0x40001800
 8001f44:	40001c00 	.word	0x40001c00
 8001f48:	40002000 	.word	0x40002000

08001f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e042      	b.n	800200c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fc6a 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	@ 0x24
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f973 	bl	80022a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b20      	cmp	r3, #32
 8002032:	d175      	bne.n	8002120 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_UART_Transmit+0x2c>
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e06e      	b.n	8002122 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2221      	movs	r2, #33	@ 0x21
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002052:	f7fe fd99 	bl	8000b88 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	88fa      	ldrh	r2, [r7, #6]
 800205c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800206c:	d108      	bne.n	8002080 <HAL_UART_Transmit+0x6c>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e003      	b.n	8002088 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002088:	e02e      	b.n	80020e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f848 	bl	800212a <UART_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e03a      	b.n	8002122 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10b      	bne.n	80020ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	3302      	adds	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	e007      	b.n	80020da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	3301      	adds	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1cb      	bne.n	800208a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	2140      	movs	r1, #64	@ 0x40
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f814 	bl	800212a <UART_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e006      	b.n	8002122 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213a:	e03b      	b.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002142:	d037      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7fe fd20 	bl	8000b88 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <UART_WaitOnFlagUntilTimeout+0x30>
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e03a      	b.n	80021d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b80      	cmp	r3, #128	@ 0x80
 8002170:	d020      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b40      	cmp	r3, #64	@ 0x40
 8002176:	d01d      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b08      	cmp	r3, #8
 8002184:	d116      	bne.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f81d 	bl	80021dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2208      	movs	r2, #8
 80021a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e00f      	b.n	80021d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4013      	ands	r3, r2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d0b4      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021dc:	b480      	push	{r7}
 80021de:	b095      	sub	sp, #84	@ 0x54
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	330c      	adds	r3, #12
 8002202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002204:	643a      	str	r2, [r7, #64]	@ 0x40
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800220a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e5      	bne.n	80021e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3314      	adds	r3, #20
 800221e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	e853 3f00 	ldrex	r3, [r3]
 8002226:	61fb      	str	r3, [r7, #28]
   return(result);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3314      	adds	r3, #20
 8002236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800223e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002240:	e841 2300 	strex	r3, r2, [r1]
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e5      	bne.n	8002218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	2b01      	cmp	r3, #1
 8002252:	d119      	bne.n	8002288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	e853 3f00 	ldrex	r3, [r3]
 8002262:	60bb      	str	r3, [r7, #8]
   return(result);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f023 0310 	bic.w	r3, r3, #16
 800226a:	647b      	str	r3, [r7, #68]	@ 0x44
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002274:	61ba      	str	r2, [r7, #24]
 8002276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002278:	6979      	ldr	r1, [r7, #20]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	e841 2300 	strex	r3, r2, [r1]
 8002280:	613b      	str	r3, [r7, #16]
   return(result);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e5      	bne.n	8002254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002296:	bf00      	nop
 8002298:	3754      	adds	r7, #84	@ 0x54
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a8:	b0c0      	sub	sp, #256	@ 0x100
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c0:	68d9      	ldr	r1, [r3, #12]
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	ea40 0301 	orr.w	r3, r0, r1
 80022cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	431a      	orrs	r2, r3
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022fc:	f021 010c 	bic.w	r1, r1, #12
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800230a:	430b      	orrs	r3, r1
 800230c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231e:	6999      	ldr	r1, [r3, #24]
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	ea40 0301 	orr.w	r3, r0, r1
 800232a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b8f      	ldr	r3, [pc, #572]	@ (8002570 <UART_SetConfig+0x2cc>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d005      	beq.n	8002344 <UART_SetConfig+0xa0>
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b8d      	ldr	r3, [pc, #564]	@ (8002574 <UART_SetConfig+0x2d0>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d104      	bne.n	800234e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002344:	f7ff fb2e 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8002348:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800234c:	e003      	b.n	8002356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800234e:	f7ff fb15 	bl	800197c <HAL_RCC_GetPCLK1Freq>
 8002352:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002360:	f040 810c 	bne.w	800257c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002368:	2200      	movs	r2, #0
 800236a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800236e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	1891      	adds	r1, r2, r2
 800237c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800237e:	415b      	adcs	r3, r3
 8002380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002386:	4621      	mov	r1, r4
 8002388:	eb12 0801 	adds.w	r8, r2, r1
 800238c:	4629      	mov	r1, r5
 800238e:	eb43 0901 	adc.w	r9, r3, r1
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800239e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023a6:	4690      	mov	r8, r2
 80023a8:	4699      	mov	r9, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	eb18 0303 	adds.w	r3, r8, r3
 80023b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023b4:	462b      	mov	r3, r5
 80023b6:	eb49 0303 	adc.w	r3, r9, r3
 80023ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023d2:	460b      	mov	r3, r1
 80023d4:	18db      	adds	r3, r3, r3
 80023d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80023d8:	4613      	mov	r3, r2
 80023da:	eb42 0303 	adc.w	r3, r2, r3
 80023de:	657b      	str	r3, [r7, #84]	@ 0x54
 80023e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023e8:	f7fd ff4a 	bl	8000280 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4b61      	ldr	r3, [pc, #388]	@ (8002578 <UART_SetConfig+0x2d4>)
 80023f2:	fba3 2302 	umull	r2, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	011c      	lsls	r4, r3, #4
 80023fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023fe:	2200      	movs	r2, #0
 8002400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002404:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	1891      	adds	r1, r2, r2
 8002412:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002414:	415b      	adcs	r3, r3
 8002416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800241c:	4641      	mov	r1, r8
 800241e:	eb12 0a01 	adds.w	sl, r2, r1
 8002422:	4649      	mov	r1, r9
 8002424:	eb43 0b01 	adc.w	fp, r3, r1
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800243c:	4692      	mov	sl, r2
 800243e:	469b      	mov	fp, r3
 8002440:	4643      	mov	r3, r8
 8002442:	eb1a 0303 	adds.w	r3, sl, r3
 8002446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800244a:	464b      	mov	r3, r9
 800244c:	eb4b 0303 	adc.w	r3, fp, r3
 8002450:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002460:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002468:	460b      	mov	r3, r1
 800246a:	18db      	adds	r3, r3, r3
 800246c:	643b      	str	r3, [r7, #64]	@ 0x40
 800246e:	4613      	mov	r3, r2
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	647b      	str	r3, [r7, #68]	@ 0x44
 8002476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800247a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800247e:	f7fd feff 	bl	8000280 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4611      	mov	r1, r2
 8002488:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <UART_SetConfig+0x2d4>)
 800248a:	fba3 2301 	umull	r2, r3, r3, r1
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2264      	movs	r2, #100	@ 0x64
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	1acb      	subs	r3, r1, r3
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800249e:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <UART_SetConfig+0x2d4>)
 80024a0:	fba3 2302 	umull	r2, r3, r3, r2
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024ac:	441c      	add	r4, r3
 80024ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	1891      	adds	r1, r2, r2
 80024c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024c8:	415b      	adcs	r3, r3
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024d0:	4641      	mov	r1, r8
 80024d2:	1851      	adds	r1, r2, r1
 80024d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80024d6:	4649      	mov	r1, r9
 80024d8:	414b      	adcs	r3, r1
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024e8:	4659      	mov	r1, fp
 80024ea:	00cb      	lsls	r3, r1, #3
 80024ec:	4651      	mov	r1, sl
 80024ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f2:	4651      	mov	r1, sl
 80024f4:	00ca      	lsls	r2, r1, #3
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	4642      	mov	r2, r8
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002504:	464b      	mov	r3, r9
 8002506:	460a      	mov	r2, r1
 8002508:	eb42 0303 	adc.w	r3, r2, r3
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800251c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002524:	460b      	mov	r3, r1
 8002526:	18db      	adds	r3, r3, r3
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800252a:	4613      	mov	r3, r2
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800253a:	f7fd fea1 	bl	8000280 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <UART_SetConfig+0x2d4>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	2164      	movs	r1, #100	@ 0x64
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	3332      	adds	r3, #50	@ 0x32
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <UART_SetConfig+0x2d4>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	f003 0207 	and.w	r2, r3, #7
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4422      	add	r2, r4
 800256a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800256c:	e106      	b.n	800277c <UART_SetConfig+0x4d8>
 800256e:	bf00      	nop
 8002570:	40011000 	.word	0x40011000
 8002574:	40011400 	.word	0x40011400
 8002578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800257c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002586:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800258a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800258e:	4642      	mov	r2, r8
 8002590:	464b      	mov	r3, r9
 8002592:	1891      	adds	r1, r2, r2
 8002594:	6239      	str	r1, [r7, #32]
 8002596:	415b      	adcs	r3, r3
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800259e:	4641      	mov	r1, r8
 80025a0:	1854      	adds	r4, r2, r1
 80025a2:	4649      	mov	r1, r9
 80025a4:	eb43 0501 	adc.w	r5, r3, r1
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	00eb      	lsls	r3, r5, #3
 80025b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025b6:	00e2      	lsls	r2, r4, #3
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4643      	mov	r3, r8
 80025be:	18e3      	adds	r3, r4, r3
 80025c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025c4:	464b      	mov	r3, r9
 80025c6:	eb45 0303 	adc.w	r3, r5, r3
 80025ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025ea:	4629      	mov	r1, r5
 80025ec:	008b      	lsls	r3, r1, #2
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025f4:	4621      	mov	r1, r4
 80025f6:	008a      	lsls	r2, r1, #2
 80025f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025fc:	f7fd fe40 	bl	8000280 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4b60      	ldr	r3, [pc, #384]	@ (8002788 <UART_SetConfig+0x4e4>)
 8002606:	fba3 2302 	umull	r2, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	011c      	lsls	r4, r3, #4
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800261c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	61b9      	str	r1, [r7, #24]
 8002628:	415b      	adcs	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	4641      	mov	r1, r8
 8002632:	1851      	adds	r1, r2, r1
 8002634:	6139      	str	r1, [r7, #16]
 8002636:	4649      	mov	r1, r9
 8002638:	414b      	adcs	r3, r1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002648:	4659      	mov	r1, fp
 800264a:	00cb      	lsls	r3, r1, #3
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002652:	4651      	mov	r1, sl
 8002654:	00ca      	lsls	r2, r1, #3
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	4603      	mov	r3, r0
 800265c:	4642      	mov	r2, r8
 800265e:	189b      	adds	r3, r3, r2
 8002660:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002664:	464b      	mov	r3, r9
 8002666:	460a      	mov	r2, r1
 8002668:	eb42 0303 	adc.w	r3, r2, r3
 800266c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800267a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002688:	4649      	mov	r1, r9
 800268a:	008b      	lsls	r3, r1, #2
 800268c:	4641      	mov	r1, r8
 800268e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002692:	4641      	mov	r1, r8
 8002694:	008a      	lsls	r2, r1, #2
 8002696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800269a:	f7fd fdf1 	bl	8000280 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <UART_SetConfig+0x4e4>)
 80026a6:	fba3 2301 	umull	r2, r3, r3, r1
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2264      	movs	r2, #100	@ 0x64
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	1acb      	subs	r3, r1, r3
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	@ 0x32
 80026b8:	4a33      	ldr	r2, [pc, #204]	@ (8002788 <UART_SetConfig+0x4e4>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c4:	441c      	add	r4, r3
 80026c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ca:	2200      	movs	r2, #0
 80026cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80026ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80026d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	1891      	adds	r1, r2, r2
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	415b      	adcs	r3, r3
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e4:	4641      	mov	r1, r8
 80026e6:	1851      	adds	r1, r2, r1
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	4649      	mov	r1, r9
 80026ec:	414b      	adcs	r3, r1
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026fc:	4659      	mov	r1, fp
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002706:	4651      	mov	r1, sl
 8002708:	00ca      	lsls	r2, r1, #3
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	4603      	mov	r3, r0
 8002710:	4642      	mov	r2, r8
 8002712:	189b      	adds	r3, r3, r2
 8002714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002716:	464b      	mov	r3, r9
 8002718:	460a      	mov	r2, r1
 800271a:	eb42 0303 	adc.w	r3, r2, r3
 800271e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	663b      	str	r3, [r7, #96]	@ 0x60
 800272a:	667a      	str	r2, [r7, #100]	@ 0x64
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002738:	4649      	mov	r1, r9
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	4641      	mov	r1, r8
 800273e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002742:	4641      	mov	r1, r8
 8002744:	008a      	lsls	r2, r1, #2
 8002746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800274a:	f7fd fd99 	bl	8000280 <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <UART_SetConfig+0x4e4>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2164      	movs	r1, #100	@ 0x64
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	@ 0x32
 8002766:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <UART_SetConfig+0x4e4>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4422      	add	r2, r4
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002782:	46bd      	mov	sp, r7
 8002784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002788:	51eb851f 	.word	0x51eb851f

0800278c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0208 	add.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f103 0208 	add.w	r2, r3, #8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f103 0208 	add.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002844:	d103      	bne.n	800284e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e00c      	b.n	8002868 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3308      	adds	r3, #8
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e002      	b.n	800285c <vListInsert+0x2e>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d2f6      	bcs.n	8002856 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6852      	ldr	r2, [r2, #4]
 80028c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d103      	bne.n	80028d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 ff2f 	bl	800376c <pvPortMalloc>
 800290e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00e      	beq.n	8002934 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002916:	20a0      	movs	r0, #160	@ 0xa0
 8002918:	f000 ff28 	bl	800376c <pvPortMalloc>
 800291c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30
 800292a:	e005      	b.n	8002938 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	f000 ffeb 	bl	8003908 <vPortFree>
 8002932:	e001      	b.n	8002938 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d013      	beq.n	8002966 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	2300      	movs	r3, #0
 8002942:	9303      	str	r3, [sp, #12]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f80f 	bl	8002978 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800295a:	69f8      	ldr	r0, [r7, #28]
 800295c:	f000 f8b2 	bl	8002ac4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002960:	2301      	movs	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e002      	b.n	800296c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800296a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800296c:	69bb      	ldr	r3, [r7, #24]
    }
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002990:	3b01      	subs	r3, #1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f023 0307 	bic.w	r3, r3, #7
 800299e:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <prvInitialiseNewTask+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ae:	f383 8811 	msr	BASEPRI, r3
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	e7fd      	b.n	80029be <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01f      	beq.n	8002a08 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e012      	b.n	80029f4 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	7819      	ldrb	r1, [r3, #0]
 80029d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	3334      	adds	r3, #52	@ 0x34
 80029de:	460a      	mov	r2, r1
 80029e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d9e9      	bls.n	80029ce <prvInitialiseNewTask+0x56>
 80029fa:	e000      	b.n	80029fe <prvInitialiseNewTask+0x86>
            {
                break;
 80029fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a06:	e003      	b.n	8002a10 <prvInitialiseNewTask+0x98>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d901      	bls.n	8002a1a <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a16:	2306      	movs	r3, #6
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8002a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a28:	2200      	movs	r2, #0
 8002a2a:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fecb 	bl	80027cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	3318      	adds	r3, #24
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fec6 	bl	80027cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a44:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a48:	f1c3 0207 	rsb	r2, r3, #7
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	3398      	adds	r3, #152	@ 0x98
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f892 	bl	8003b88 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	339c      	adds	r3, #156	@ 0x9c
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 f88b 	bl	8003b88 <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	334c      	adds	r3, #76	@ 0x4c
 8002a76:	224c      	movs	r2, #76	@ 0x4c
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 f884 	bl	8003b88 <memset>
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <prvInitialiseNewTask+0x140>)
 8002a84:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a88:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <prvInitialiseNewTask+0x144>)
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <prvInitialiseNewTask+0x148>)
 8002a90:	659a      	str	r2, [r3, #88]	@ 0x58
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	69b8      	ldr	r0, [r7, #24]
 8002a98:	f000 fc4e 	bl	8003338 <pxPortInitialiseStack>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <prvInitialiseNewTask+0x136>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aae:	bf00      	nop
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20003e6c 	.word	0x20003e6c
 8002abc:	20003ed4 	.word	0x20003ed4
 8002ac0:	20003f3c 	.word	0x20003f3c

08002ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002acc:	f000 fd66 	bl	800359c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <prvAddNewTaskToReadyList+0xb8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <prvAddNewTaskToReadyList+0xb8>)
 8002ad8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <prvAddNewTaskToReadyList+0xbc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ae2:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <prvAddNewTaskToReadyList+0xbc>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ae8:	4b24      	ldr	r3, [pc, #144]	@ (8002b7c <prvAddNewTaskToReadyList+0xb8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d110      	bne.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002af0:	f000 fb1c 	bl	800312c <prvInitialiseTaskLists>
 8002af4:	e00d      	b.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002af6:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <prvAddNewTaskToReadyList+0xc0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <prvAddNewTaskToReadyList+0xbc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d802      	bhi.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <prvAddNewTaskToReadyList+0xbc>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a1b      	ldr	r2, [pc, #108]	@ (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002b1a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	2201      	movs	r2, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <prvAddNewTaskToReadyList+0xc8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4a18      	ldr	r2, [pc, #96]	@ (8002b8c <prvAddNewTaskToReadyList+0xc8>)
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <prvAddNewTaskToReadyList+0xcc>)
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f7ff fe4e 	bl	80027e6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b4a:	f000 fd59 	bl	8003600 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <prvAddNewTaskToReadyList+0xc0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <prvAddNewTaskToReadyList+0xbc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <prvAddNewTaskToReadyList+0xd0>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000218 	.word	0x20000218
 8002b80:	20000118 	.word	0x20000118
 8002b84:	20000224 	.word	0x20000224
 8002b88:	20000234 	.word	0x20000234
 8002b8c:	20000220 	.word	0x20000220
 8002b90:	2000011c 	.word	0x2000011c
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <xTaskDelayUntil+0x2c>
        __asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	617b      	str	r3, [r7, #20]
    }
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <xTaskDelayUntil+0x4a>
        __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	613b      	str	r3, [r7, #16]
    }
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8002be2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <xTaskDelayUntil+0xf8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <xTaskDelayUntil+0x6a>
        __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60fb      	str	r3, [r7, #12]
    }
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	e7fd      	b.n	8002bfe <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8002c02:	f000 f8a1 	bl	8002d48 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002c06:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <xTaskDelayUntil+0xfc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a3a      	ldr	r2, [r7, #32]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d20b      	bcs.n	8002c38 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d211      	bcs.n	8002c4e <xTaskDelayUntil+0xb6>
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90d      	bls.n	8002c4e <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	e00a      	b.n	8002c4e <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d303      	bcc.n	8002c4a <xTaskDelayUntil+0xb2>
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d901      	bls.n	8002c4e <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fb02 	bl	800326c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002c68:	f000 f87c 	bl	8002d64 <xTaskResumeAll>
 8002c6c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <xTaskDelayUntil+0x100>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002c86:	4618      	mov	r0, r3
 8002c88:	3728      	adds	r7, #40	@ 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000240 	.word	0x20000240
 8002c94:	2000021c 	.word	0x2000021c
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ca2:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <vTaskStartScheduler+0x88>)
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	491e      	ldr	r1, [pc, #120]	@ (8002d28 <vTaskStartScheduler+0x8c>)
 8002cb0:	481e      	ldr	r0, [pc, #120]	@ (8002d2c <vTaskStartScheduler+0x90>)
 8002cb2:	f7ff fe1f 	bl	80028f4 <xTaskCreate>
 8002cb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d11b      	bne.n	8002cf6 <vTaskStartScheduler+0x5a>
        __asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	60bb      	str	r3, [r7, #8]
    }
 8002cd0:	bf00      	nop
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002cd2:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <vTaskStartScheduler+0x94>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	334c      	adds	r3, #76	@ 0x4c
 8002cd8:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <vTaskStartScheduler+0x98>)
 8002cda:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <vTaskStartScheduler+0x9c>)
 8002cde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ce2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ce4:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <vTaskStartScheduler+0xa0>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <vTaskStartScheduler+0xa4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002cf0:	f000 fbb0 	bl	8003454 <xPortStartScheduler>
 8002cf4:	e00f      	b.n	8002d16 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cfc:	d10b      	bne.n	8002d16 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	607b      	str	r3, [r7, #4]
    }
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <vTaskStartScheduler+0x76>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <vTaskStartScheduler+0xa8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000023c 	.word	0x2000023c
 8002d28:	0800457c 	.word	0x0800457c
 8002d2c:	080030fd 	.word	0x080030fd
 8002d30:	20000118 	.word	0x20000118
 8002d34:	20000014 	.word	0x20000014
 8002d38:	20000238 	.word	0x20000238
 8002d3c:	20000224 	.word	0x20000224
 8002d40:	2000021c 	.word	0x2000021c
 8002d44:	2000000c 	.word	0x2000000c

08002d48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <vTaskSuspendAll+0x18>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a03      	ldr	r2, [pc, #12]	@ (8002d60 <vTaskSuspendAll+0x18>)
 8002d54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20000240 	.word	0x20000240

08002d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d72:	4b42      	ldr	r3, [pc, #264]	@ (8002e7c <xTaskResumeAll+0x118>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <xTaskResumeAll+0x2e>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	603b      	str	r3, [r7, #0]
    }
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	e7fd      	b.n	8002d8e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d92:	f000 fc03 	bl	800359c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <xTaskResumeAll+0x118>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	4a37      	ldr	r2, [pc, #220]	@ (8002e7c <xTaskResumeAll+0x118>)
 8002d9e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da0:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <xTaskResumeAll+0x118>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d161      	bne.n	8002e6c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002da8:	4b35      	ldr	r3, [pc, #212]	@ (8002e80 <xTaskResumeAll+0x11c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05d      	beq.n	8002e6c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002db0:	e02e      	b.n	8002e10 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db2:	4b34      	ldr	r3, [pc, #208]	@ (8002e84 <xTaskResumeAll+0x120>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fd6e 	bl	80028a0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fd69 	bl	80028a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <xTaskResumeAll+0x124>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <xTaskResumeAll+0x124>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a27      	ldr	r2, [pc, #156]	@ (8002e8c <xTaskResumeAll+0x128>)
 8002dee:	441a      	add	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7ff fcf5 	bl	80027e6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	4b23      	ldr	r3, [pc, #140]	@ (8002e90 <xTaskResumeAll+0x12c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <xTaskResumeAll+0x130>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e10:	4b1c      	ldr	r3, [pc, #112]	@ (8002e84 <xTaskResumeAll+0x120>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1cc      	bne.n	8002db2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e1e:	f000 fa09 	bl	8003234 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e22:	4b1d      	ldr	r3, [pc, #116]	@ (8002e98 <xTaskResumeAll+0x134>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e2e:	f000 f847 	bl	8002ec0 <xTaskIncrementTick>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8002e38:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <xTaskResumeAll+0x130>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f1      	bne.n	8002e2e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <xTaskResumeAll+0x134>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e50:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <xTaskResumeAll+0x130>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <xTaskResumeAll+0x138>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e6c:	f000 fbc8 	bl	8003600 <vPortExitCritical>

    return xAlreadyYielded;
 8002e70:	68bb      	ldr	r3, [r7, #8]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000240 	.word	0x20000240
 8002e80:	20000218 	.word	0x20000218
 8002e84:	200001d8 	.word	0x200001d8
 8002e88:	20000220 	.word	0x20000220
 8002e8c:	2000011c 	.word	0x2000011c
 8002e90:	20000118 	.word	0x20000118
 8002e94:	2000022c 	.word	0x2000022c
 8002e98:	20000228 	.word	0x20000228
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <xTaskGetTickCount+0x1c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	2000021c 	.word	0x2000021c

08002ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eca:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <xTaskIncrementTick+0x148>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 808f 	bne.w	8002ff2 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800300c <xTaskIncrementTick+0x14c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002edc:	4a4b      	ldr	r2, [pc, #300]	@ (800300c <xTaskIncrementTick+0x14c>)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d121      	bne.n	8002f2c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ee8:	4b49      	ldr	r3, [pc, #292]	@ (8003010 <xTaskIncrementTick+0x150>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <xTaskIncrementTick+0x4a>
        __asm volatile
 8002ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	603b      	str	r3, [r7, #0]
    }
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	e7fd      	b.n	8002f06 <xTaskIncrementTick+0x46>
 8002f0a:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <xTaskIncrementTick+0x150>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <xTaskIncrementTick+0x154>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3e      	ldr	r2, [pc, #248]	@ (8003010 <xTaskIncrementTick+0x150>)
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <xTaskIncrementTick+0x154>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003018 <xTaskIncrementTick+0x158>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a3c      	ldr	r2, [pc, #240]	@ (8003018 <xTaskIncrementTick+0x158>)
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	f000 f984 	bl	8003234 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800301c <xTaskIncrementTick+0x15c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d348      	bcc.n	8002fc8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f36:	4b36      	ldr	r3, [pc, #216]	@ (8003010 <xTaskIncrementTick+0x150>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f40:	4b36      	ldr	r3, [pc, #216]	@ (800301c <xTaskIncrementTick+0x15c>)
 8002f42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f46:	601a      	str	r2, [r3, #0]
                    break;
 8002f48:	e03e      	b.n	8002fc8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <xTaskIncrementTick+0x150>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d203      	bcs.n	8002f6a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f62:	4a2e      	ldr	r2, [pc, #184]	@ (800301c <xTaskIncrementTick+0x15c>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f68:	e02e      	b.n	8002fc8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fc96 	bl	80028a0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3318      	adds	r3, #24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fc8d 	bl	80028a0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <xTaskIncrementTick+0x160>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	4a22      	ldr	r2, [pc, #136]	@ (8003020 <xTaskIncrementTick+0x160>)
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <xTaskIncrementTick+0x164>)
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7ff fc19 	bl	80027e6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <xTaskIncrementTick+0x168>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d3b9      	bcc.n	8002f36 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc6:	e7b6      	b.n	8002f36 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fc8:	4b17      	ldr	r3, [pc, #92]	@ (8003028 <xTaskIncrementTick+0x168>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fce:	4915      	ldr	r1, [pc, #84]	@ (8003024 <xTaskIncrementTick+0x164>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d901      	bls.n	8002fe4 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <xTaskIncrementTick+0x16c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e004      	b.n	8002ffc <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <xTaskIncrementTick+0x170>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <xTaskIncrementTick+0x170>)
 8002ffa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002ffc:	697b      	ldr	r3, [r7, #20]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000240 	.word	0x20000240
 800300c:	2000021c 	.word	0x2000021c
 8003010:	200001d0 	.word	0x200001d0
 8003014:	200001d4 	.word	0x200001d4
 8003018:	20000230 	.word	0x20000230
 800301c:	20000238 	.word	0x20000238
 8003020:	20000220 	.word	0x20000220
 8003024:	2000011c 	.word	0x2000011c
 8003028:	20000118 	.word	0x20000118
 800302c:	2000022c 	.word	0x2000022c
 8003030:	20000228 	.word	0x20000228

08003034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800303a:	4b2a      	ldr	r3, [pc, #168]	@ (80030e4 <vTaskSwitchContext+0xb0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <vTaskSwitchContext+0xb4>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003048:	e045      	b.n	80030d6 <vTaskSwitchContext+0xa2>
        xYieldPending = pdFALSE;
 800304a:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <vTaskSwitchContext+0xb4>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003050:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <vTaskSwitchContext+0xb8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	f1c3 031f 	rsb	r3, r3, #31
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	4922      	ldr	r1, [pc, #136]	@ (80030f0 <vTaskSwitchContext+0xbc>)
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <vTaskSwitchContext+0x5e>
        __asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	607b      	str	r3, [r7, #4]
    }
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	e7fd      	b.n	800308e <vTaskSwitchContext+0x5a>
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <vTaskSwitchContext+0xbc>)
 800309e:	4413      	add	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	3308      	adds	r3, #8
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d104      	bne.n	80030c2 <vTaskSwitchContext+0x8e>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <vTaskSwitchContext+0xc0>)
 80030ca:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <vTaskSwitchContext+0xc0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	334c      	adds	r3, #76	@ 0x4c
 80030d2:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <vTaskSwitchContext+0xc4>)
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000240 	.word	0x20000240
 80030e8:	2000022c 	.word	0x2000022c
 80030ec:	20000220 	.word	0x20000220
 80030f0:	2000011c 	.word	0x2000011c
 80030f4:	20000118 	.word	0x20000118
 80030f8:	20000014 	.word	0x20000014

080030fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003104:	f000 f852 	bl	80031ac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <prvIdleTask+0x28>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d9f9      	bls.n	8003104 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <prvIdleTask+0x2c>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003120:	e7f0      	b.n	8003104 <prvIdleTask+0x8>
 8003122:	bf00      	nop
 8003124:	2000011c 	.word	0x2000011c
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	e00c      	b.n	8003152 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4a12      	ldr	r2, [pc, #72]	@ (800318c <prvInitialiseTaskLists+0x60>)
 8003144:	4413      	add	r3, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fb20 	bl	800278c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d9ef      	bls.n	8003138 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003158:	480d      	ldr	r0, [pc, #52]	@ (8003190 <prvInitialiseTaskLists+0x64>)
 800315a:	f7ff fb17 	bl	800278c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800315e:	480d      	ldr	r0, [pc, #52]	@ (8003194 <prvInitialiseTaskLists+0x68>)
 8003160:	f7ff fb14 	bl	800278c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003164:	480c      	ldr	r0, [pc, #48]	@ (8003198 <prvInitialiseTaskLists+0x6c>)
 8003166:	f7ff fb11 	bl	800278c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800316a:	480c      	ldr	r0, [pc, #48]	@ (800319c <prvInitialiseTaskLists+0x70>)
 800316c:	f7ff fb0e 	bl	800278c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003170:	480b      	ldr	r0, [pc, #44]	@ (80031a0 <prvInitialiseTaskLists+0x74>)
 8003172:	f7ff fb0b 	bl	800278c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <prvInitialiseTaskLists+0x78>)
 8003178:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <prvInitialiseTaskLists+0x64>)
 800317a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <prvInitialiseTaskLists+0x7c>)
 800317e:	4a05      	ldr	r2, [pc, #20]	@ (8003194 <prvInitialiseTaskLists+0x68>)
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000011c 	.word	0x2000011c
 8003190:	200001a8 	.word	0x200001a8
 8003194:	200001bc 	.word	0x200001bc
 8003198:	200001d8 	.word	0x200001d8
 800319c:	200001ec 	.word	0x200001ec
 80031a0:	20000204 	.word	0x20000204
 80031a4:	200001d0 	.word	0x200001d0
 80031a8:	200001d4 	.word	0x200001d4

080031ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031b2:	e019      	b.n	80031e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80031b4:	f000 f9f2 	bl	800359c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <prvCheckTasksWaitingTermination+0x50>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fb6b 	bl	80028a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <prvCheckTasksWaitingTermination+0x54>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003200 <prvCheckTasksWaitingTermination+0x54>)
 80031d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <prvCheckTasksWaitingTermination+0x58>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <prvCheckTasksWaitingTermination+0x58>)
 80031dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031de:	f000 fa0f 	bl	8003600 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f810 	bl	8003208 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <prvCheckTasksWaitingTermination+0x58>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e1      	bne.n	80031b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200001ec 	.word	0x200001ec
 8003200:	20000218 	.word	0x20000218
 8003204:	20000200 	.word	0x20000200

08003208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	334c      	adds	r3, #76	@ 0x4c
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fcbf 	bl	8003b98 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fb72 	bl	8003908 <vPortFree>
                vPortFree( pxTCB );
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fb6f 	bl	8003908 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003238:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <prvResetNextTaskUnblockTime+0x30>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <prvResetNextTaskUnblockTime+0x34>)
 8003244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003248:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800324a:	e005      	b.n	8003258 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <prvResetNextTaskUnblockTime+0x30>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a04      	ldr	r2, [pc, #16]	@ (8003268 <prvResetNextTaskUnblockTime+0x34>)
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	200001d0 	.word	0x200001d0
 8003268:	20000238 	.word	0x20000238

0800326c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003276:	4b29      	ldr	r3, [pc, #164]	@ (800331c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800327c:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3304      	adds	r3, #4
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb0c 	bl	80028a0 <uxListRemove>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4013      	ands	r3, r2
 80032a2:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ac:	d10a      	bne.n	80032c4 <prvAddCurrentTaskToDelayedList+0x58>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	481a      	ldr	r0, [pc, #104]	@ (8003328 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032be:	f7ff fa92 	bl	80027e6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80032c2:	e026      	b.n	8003312 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032cc:	4b14      	ldr	r3, [pc, #80]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d209      	bcs.n	80032f0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032dc:	4b13      	ldr	r3, [pc, #76]	@ (800332c <prvAddCurrentTaskToDelayedList+0xc0>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f7ff faa0 	bl	800282e <vListInsert>
}
 80032ee:	e010      	b.n	8003312 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <prvAddCurrentTaskToDelayedList+0xc4>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f7ff fa96 	bl	800282e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003302:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d202      	bcs.n	8003312 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800330c:	4a09      	ldr	r2, [pc, #36]	@ (8003334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	2000021c 	.word	0x2000021c
 8003320:	20000118 	.word	0x20000118
 8003324:	20000220 	.word	0x20000220
 8003328:	20000204 	.word	0x20000204
 800332c:	200001d4 	.word	0x200001d4
 8003330:	200001d0 	.word	0x200001d0
 8003334:	20000238 	.word	0x20000238

08003338 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3b04      	subs	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003350:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3b04      	subs	r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3b04      	subs	r3, #4
 8003366:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003368:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <pxPortInitialiseStack+0x64>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b14      	subs	r3, #20
 8003372:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b04      	subs	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f06f 0202 	mvn.w	r2, #2
 8003386:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3b20      	subs	r3, #32
 800338c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	080033a1 	.word	0x080033a1

080033a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <prvTaskExitError+0x58>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b2:	d00b      	beq.n	80033cc <prvTaskExitError+0x2c>
        __asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	60fb      	str	r3, [r7, #12]
    }
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <prvTaskExitError+0x28>
        __asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	60bb      	str	r3, [r7, #8]
    }
 80033de:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80033e0:	bf00      	nop
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0fc      	beq.n	80033e2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000010 	.word	0x20000010
 80033fc:	00000000 	.word	0x00000000

08003400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <pxCurrentTCBConst2>)
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	6808      	ldr	r0, [r1, #0]
 8003406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340a:	f380 8809 	msr	PSP, r0
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f380 8811 	msr	BASEPRI, r0
 800341a:	4770      	bx	lr
 800341c:	f3af 8000 	nop.w

08003420 <pxCurrentTCBConst2>:
 8003420:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop

08003428 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003428:	4808      	ldr	r0, [pc, #32]	@ (800344c <prvPortStartFirstTask+0x24>)
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	6800      	ldr	r0, [r0, #0]
 800342e:	f380 8808 	msr	MSP, r0
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f380 8814 	msr	CONTROL, r0
 800343a:	b662      	cpsie	i
 800343c:	b661      	cpsie	f
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	df00      	svc	0
 8003448:	bf00      	nop
 800344a:	0000      	.short	0x0000
 800344c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop

08003454 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <xPortStartScheduler+0x124>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a47      	ldr	r2, [pc, #284]	@ (800357c <xPortStartScheduler+0x128>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10b      	bne.n	800347c <xPortStartScheduler+0x28>
        __asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	613b      	str	r3, [r7, #16]
    }
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800347c:	4b3e      	ldr	r3, [pc, #248]	@ (8003578 <xPortStartScheduler+0x124>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3f      	ldr	r2, [pc, #252]	@ (8003580 <xPortStartScheduler+0x12c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d10b      	bne.n	800349e <xPortStartScheduler+0x4a>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60fb      	str	r3, [r7, #12]
    }
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	e7fd      	b.n	800349a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800349e:	4b39      	ldr	r3, [pc, #228]	@ (8003584 <xPortStartScheduler+0x130>)
 80034a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	22ff      	movs	r2, #255	@ 0xff
 80034ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4b31      	ldr	r3, [pc, #196]	@ (8003588 <xPortStartScheduler+0x134>)
 80034c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034c6:	4b31      	ldr	r3, [pc, #196]	@ (800358c <xPortStartScheduler+0x138>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034cc:	e009      	b.n	80034e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80034ce:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <xPortStartScheduler+0x138>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	4a2d      	ldr	r2, [pc, #180]	@ (800358c <xPortStartScheduler+0x138>)
 80034d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ea:	2b80      	cmp	r3, #128	@ 0x80
 80034ec:	d0ef      	beq.n	80034ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ee:	4b27      	ldr	r3, [pc, #156]	@ (800358c <xPortStartScheduler+0x138>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d00b      	beq.n	8003512 <xPortStartScheduler+0xbe>
        __asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	60bb      	str	r3, [r7, #8]
    }
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <xPortStartScheduler+0x138>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	4a1c      	ldr	r2, [pc, #112]	@ (800358c <xPortStartScheduler+0x138>)
 800351a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <xPortStartScheduler+0x138>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <xPortStartScheduler+0x138>)
 8003526:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003530:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <xPortStartScheduler+0x13c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a16      	ldr	r2, [pc, #88]	@ (8003590 <xPortStartScheduler+0x13c>)
 8003536:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800353a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800353c:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <xPortStartScheduler+0x13c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <xPortStartScheduler+0x13c>)
 8003542:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003548:	f000 f8e0 	bl	800370c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800354c:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <xPortStartScheduler+0x140>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003552:	f000 f8ff 	bl	8003754 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <xPortStartScheduler+0x144>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a0f      	ldr	r2, [pc, #60]	@ (8003598 <xPortStartScheduler+0x144>)
 800355c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003560:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003562:	f7ff ff61 	bl	8003428 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003566:	f7ff fd65 	bl	8003034 <vTaskSwitchContext>
    prvTaskExitError();
 800356a:	f7ff ff19 	bl	80033a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	e000ed00 	.word	0xe000ed00
 800357c:	410fc271 	.word	0x410fc271
 8003580:	410fc270 	.word	0x410fc270
 8003584:	e000e400 	.word	0xe000e400
 8003588:	20000244 	.word	0x20000244
 800358c:	20000248 	.word	0x20000248
 8003590:	e000ed20 	.word	0xe000ed20
 8003594:	20000010 	.word	0x20000010
 8003598:	e000ef34 	.word	0xe000ef34

0800359c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	607b      	str	r3, [r7, #4]
    }
 80035b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <vPortEnterCritical+0x5c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a0e      	ldr	r2, [pc, #56]	@ (80035f8 <vPortEnterCritical+0x5c>)
 80035be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80035c0:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <vPortEnterCritical+0x5c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d110      	bne.n	80035ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035c8:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <vPortEnterCritical+0x60>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <vPortEnterCritical+0x4e>
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	603b      	str	r3, [r7, #0]
    }
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <vPortEnterCritical+0x4a>
    }
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000010 	.word	0x20000010
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <vPortExitCritical+0x50>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <vPortExitCritical+0x26>
        __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	607b      	str	r3, [r7, #4]
    }
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <vPortExitCritical+0x50>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3b01      	subs	r3, #1
 800362c:	4a08      	ldr	r2, [pc, #32]	@ (8003650 <vPortExitCritical+0x50>)
 800362e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003630:	4b07      	ldr	r3, [pc, #28]	@ (8003650 <vPortExitCritical+0x50>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <vPortExitCritical+0x44>
 8003638:	2300      	movs	r3, #0
 800363a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003642:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000010 	.word	0x20000010
	...

08003660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003660:	f3ef 8009 	mrs	r0, PSP
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <pxCurrentTCBConst>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f01e 0f10 	tst.w	lr, #16
 8003670:	bf08      	it	eq
 8003672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367a:	6010      	str	r0, [r2, #0]
 800367c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003684:	f380 8811 	msr	BASEPRI, r0
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f7ff fcd0 	bl	8003034 <vTaskSwitchContext>
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f380 8811 	msr	BASEPRI, r0
 800369c:	bc09      	pop	{r0, r3}
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	6808      	ldr	r0, [r1, #0]
 80036a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a6:	f01e 0f10 	tst.w	lr, #16
 80036aa:	bf08      	it	eq
 80036ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036b0:	f380 8809 	msr	PSP, r0
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w

080036c0 <pxCurrentTCBConst>:
 80036c0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
        __asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	607b      	str	r3, [r7, #4]
    }
 80036e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80036e2:	f7ff fbed 	bl	8002ec0 <xTaskIncrementTick>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <SysTick_Handler+0x40>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f383 8811 	msr	BASEPRI, r3
    }
 80036fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <vPortSetupTimerInterrupt+0x34>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <vPortSetupTimerInterrupt+0x38>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <vPortSetupTimerInterrupt+0x3c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <vPortSetupTimerInterrupt+0x40>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <vPortSetupTimerInterrupt+0x44>)
 800372a:	3b01      	subs	r3, #1
 800372c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800372e:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <vPortSetupTimerInterrupt+0x34>)
 8003730:	2207      	movs	r2, #7
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e010 	.word	0xe000e010
 8003744:	e000e018 	.word	0xe000e018
 8003748:	20000000 	.word	0x20000000
 800374c:	10624dd3 	.word	0x10624dd3
 8003750:	e000e014 	.word	0xe000e014

08003754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003754:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003764 <vPortEnableVFP+0x10>
 8003758:	6801      	ldr	r1, [r0, #0]
 800375a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800375e:	6001      	str	r1, [r0, #0]
 8003760:	4770      	bx	lr
 8003762:	0000      	.short	0x0000
 8003764:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop

0800376c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	@ 0x28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003778:	f7ff fae6 	bl	8002d48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800377c:	4b5c      	ldr	r3, [pc, #368]	@ (80038f0 <pvPortMalloc+0x184>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003784:	f000 f924 	bl	80039d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003788:	4b5a      	ldr	r3, [pc, #360]	@ (80038f4 <pvPortMalloc+0x188>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 8095 	bne.w	80038c0 <pvPortMalloc+0x154>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01e      	beq.n	80037da <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800379c:	2208      	movs	r2, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <pvPortMalloc+0x6e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f023 0307 	bic.w	r3, r3, #7
 80037b4:	3308      	adds	r3, #8
 80037b6:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <pvPortMalloc+0x6e>
        __asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	617b      	str	r3, [r7, #20]
    }
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	e7fd      	b.n	80037d6 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d06f      	beq.n	80038c0 <pvPortMalloc+0x154>
 80037e0:	4b45      	ldr	r3, [pc, #276]	@ (80038f8 <pvPortMalloc+0x18c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d86a      	bhi.n	80038c0 <pvPortMalloc+0x154>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037ea:	4b44      	ldr	r3, [pc, #272]	@ (80038fc <pvPortMalloc+0x190>)
 80037ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037ee:	4b43      	ldr	r3, [pc, #268]	@ (80038fc <pvPortMalloc+0x190>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037f4:	e004      	b.n	8003800 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d903      	bls.n	8003812 <pvPortMalloc+0xa6>
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f1      	bne.n	80037f6 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8003812:	4b37      	ldr	r3, [pc, #220]	@ (80038f0 <pvPortMalloc+0x184>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003818:	429a      	cmp	r2, r3
 800381a:	d051      	beq.n	80038c0 <pvPortMalloc+0x154>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2208      	movs	r2, #8
 8003822:	4413      	add	r3, r2
 8003824:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1ad2      	subs	r2, r2, r3
 8003836:	2308      	movs	r3, #8
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	429a      	cmp	r2, r3
 800383c:	d920      	bls.n	8003880 <pvPortMalloc+0x114>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800383e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <pvPortMalloc+0xfc>
        __asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	613b      	str	r3, [r7, #16]
    }
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <pvPortMalloc+0xf8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800387a:	69b8      	ldr	r0, [r7, #24]
 800387c:	f000 f90a 	bl	8003a94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <pvPortMalloc+0x18c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	4a1b      	ldr	r2, [pc, #108]	@ (80038f8 <pvPortMalloc+0x18c>)
 800388c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <pvPortMalloc+0x18c>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <pvPortMalloc+0x194>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d203      	bcs.n	80038a2 <pvPortMalloc+0x136>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800389a:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <pvPortMalloc+0x18c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <pvPortMalloc+0x194>)
 80038a0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <pvPortMalloc+0x188>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038b6:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <pvPortMalloc+0x198>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	4a11      	ldr	r2, [pc, #68]	@ (8003904 <pvPortMalloc+0x198>)
 80038be:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038c0:	f7ff fa50 	bl	8002d64 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <pvPortMalloc+0x17a>
        __asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60fb      	str	r3, [r7, #12]
    }
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <pvPortMalloc+0x176>
    return pvReturn;
 80038e6:	69fb      	ldr	r3, [r7, #28]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3728      	adds	r7, #40	@ 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20003e54 	.word	0x20003e54
 80038f4:	20003e68 	.word	0x20003e68
 80038f8:	20003e58 	.word	0x20003e58
 80038fc:	20003e4c 	.word	0x20003e4c
 8003900:	20003e5c 	.word	0x20003e5c
 8003904:	20003e60 	.word	0x20003e60

08003908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d04f      	beq.n	80039ba <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800391a:	2308      	movs	r3, #8
 800391c:	425b      	negs	r3, r3
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	4b25      	ldr	r3, [pc, #148]	@ (80039c4 <vPortFree+0xbc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <vPortFree+0x46>
        __asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60fb      	str	r3, [r7, #12]
    }
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <vPortFree+0x66>
        __asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60bb      	str	r3, [r7, #8]
    }
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <vPortFree+0xbc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01e      	beq.n	80039ba <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11a      	bne.n	80039ba <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <vPortFree+0xbc>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003994:	f7ff f9d8 	bl	8002d48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <vPortFree+0xc0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <vPortFree+0xc0>)
 80039a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f000 f874 	bl	8003a94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <vPortFree+0xc4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a06      	ldr	r2, [pc, #24]	@ (80039cc <vPortFree+0xc4>)
 80039b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039b6:	f7ff f9d5 	bl	8002d64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20003e68 	.word	0x20003e68
 80039c8:	20003e58 	.word	0x20003e58
 80039cc:	20003e64 	.word	0x20003e64

080039d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80039da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <prvHeapInit+0xac>)
 80039de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3307      	adds	r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <prvHeapInit+0xac>)
 8003a00:	4413      	add	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <prvHeapInit+0xb0>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a80 <prvHeapInit+0xb0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	@ (8003a84 <prvHeapInit+0xb4>)
 8003a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a32:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <prvHeapInit+0xb4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <prvHeapInit+0xb4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <prvHeapInit+0xb4>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <prvHeapInit+0xb8>)
 8003a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a09      	ldr	r2, [pc, #36]	@ (8003a8c <prvHeapInit+0xbc>)
 8003a66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <prvHeapInit+0xc0>)
 8003a6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a6e:	601a      	str	r2, [r3, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	2000024c 	.word	0x2000024c
 8003a80:	20003e4c 	.word	0x20003e4c
 8003a84:	20003e54 	.word	0x20003e54
 8003a88:	20003e5c 	.word	0x20003e5c
 8003a8c:	20003e58 	.word	0x20003e58
 8003a90:	20003e68 	.word	0x20003e68

08003a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a9c:	4b28      	ldr	r3, [pc, #160]	@ (8003b40 <prvInsertBlockIntoFreeList+0xac>)
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e002      	b.n	8003aa8 <prvInsertBlockIntoFreeList+0x14>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d8f7      	bhi.n	8003aa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d108      	bne.n	8003ad6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	441a      	add	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d118      	bne.n	8003b1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <prvInsertBlockIntoFreeList+0xb0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d00d      	beq.n	8003b12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e008      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <prvInsertBlockIntoFreeList+0xb0>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e003      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d002      	beq.n	8003b32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20003e4c 	.word	0x20003e4c
 8003b44:	20003e54 	.word	0x20003e54

08003b48 <siprintf>:
 8003b48:	b40e      	push	{r1, r2, r3}
 8003b4a:	b500      	push	{lr}
 8003b4c:	b09c      	sub	sp, #112	@ 0x70
 8003b4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b50:	9002      	str	r0, [sp, #8]
 8003b52:	9006      	str	r0, [sp, #24]
 8003b54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b58:	4809      	ldr	r0, [pc, #36]	@ (8003b80 <siprintf+0x38>)
 8003b5a:	9107      	str	r1, [sp, #28]
 8003b5c:	9104      	str	r1, [sp, #16]
 8003b5e:	4909      	ldr	r1, [pc, #36]	@ (8003b84 <siprintf+0x3c>)
 8003b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b64:	9105      	str	r1, [sp, #20]
 8003b66:	6800      	ldr	r0, [r0, #0]
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	a902      	add	r1, sp, #8
 8003b6c:	f000 f9f8 	bl	8003f60 <_svfiprintf_r>
 8003b70:	9b02      	ldr	r3, [sp, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	b01c      	add	sp, #112	@ 0x70
 8003b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b7c:	b003      	add	sp, #12
 8003b7e:	4770      	bx	lr
 8003b80:	20000014 	.word	0x20000014
 8003b84:	ffff0208 	.word	0xffff0208

08003b88 <memset>:
 8003b88:	4402      	add	r2, r0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <memset+0xa>
 8003b90:	4770      	bx	lr
 8003b92:	f803 1b01 	strb.w	r1, [r3], #1
 8003b96:	e7f9      	b.n	8003b8c <memset+0x4>

08003b98 <_reclaim_reent>:
 8003b98:	4b29      	ldr	r3, [pc, #164]	@ (8003c40 <_reclaim_reent+0xa8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4283      	cmp	r3, r0
 8003b9e:	b570      	push	{r4, r5, r6, lr}
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	d04b      	beq.n	8003c3c <_reclaim_reent+0xa4>
 8003ba4:	69c3      	ldr	r3, [r0, #28]
 8003ba6:	b1ab      	cbz	r3, 8003bd4 <_reclaim_reent+0x3c>
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	b16b      	cbz	r3, 8003bc8 <_reclaim_reent+0x30>
 8003bac:	2500      	movs	r5, #0
 8003bae:	69e3      	ldr	r3, [r4, #28]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	5959      	ldr	r1, [r3, r5]
 8003bb4:	2900      	cmp	r1, #0
 8003bb6:	d13b      	bne.n	8003c30 <_reclaim_reent+0x98>
 8003bb8:	3504      	adds	r5, #4
 8003bba:	2d80      	cmp	r5, #128	@ 0x80
 8003bbc:	d1f7      	bne.n	8003bae <_reclaim_reent+0x16>
 8003bbe:	69e3      	ldr	r3, [r4, #28]
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	68d9      	ldr	r1, [r3, #12]
 8003bc4:	f000 f878 	bl	8003cb8 <_free_r>
 8003bc8:	69e3      	ldr	r3, [r4, #28]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	b111      	cbz	r1, 8003bd4 <_reclaim_reent+0x3c>
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f000 f872 	bl	8003cb8 <_free_r>
 8003bd4:	6961      	ldr	r1, [r4, #20]
 8003bd6:	b111      	cbz	r1, 8003bde <_reclaim_reent+0x46>
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 f86d 	bl	8003cb8 <_free_r>
 8003bde:	69e1      	ldr	r1, [r4, #28]
 8003be0:	b111      	cbz	r1, 8003be8 <_reclaim_reent+0x50>
 8003be2:	4620      	mov	r0, r4
 8003be4:	f000 f868 	bl	8003cb8 <_free_r>
 8003be8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003bea:	b111      	cbz	r1, 8003bf2 <_reclaim_reent+0x5a>
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 f863 	bl	8003cb8 <_free_r>
 8003bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bf4:	b111      	cbz	r1, 8003bfc <_reclaim_reent+0x64>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 f85e 	bl	8003cb8 <_free_r>
 8003bfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003bfe:	b111      	cbz	r1, 8003c06 <_reclaim_reent+0x6e>
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 f859 	bl	8003cb8 <_free_r>
 8003c06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003c08:	b111      	cbz	r1, 8003c10 <_reclaim_reent+0x78>
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f854 	bl	8003cb8 <_free_r>
 8003c10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003c12:	b111      	cbz	r1, 8003c1a <_reclaim_reent+0x82>
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 f84f 	bl	8003cb8 <_free_r>
 8003c1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003c1c:	b111      	cbz	r1, 8003c24 <_reclaim_reent+0x8c>
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f84a 	bl	8003cb8 <_free_r>
 8003c24:	6a23      	ldr	r3, [r4, #32]
 8003c26:	b14b      	cbz	r3, 8003c3c <_reclaim_reent+0xa4>
 8003c28:	4620      	mov	r0, r4
 8003c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c2e:	4718      	bx	r3
 8003c30:	680e      	ldr	r6, [r1, #0]
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 f840 	bl	8003cb8 <_free_r>
 8003c38:	4631      	mov	r1, r6
 8003c3a:	e7bb      	b.n	8003bb4 <_reclaim_reent+0x1c>
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000014 	.word	0x20000014

08003c44 <__errno>:
 8003c44:	4b01      	ldr	r3, [pc, #4]	@ (8003c4c <__errno+0x8>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000014 	.word	0x20000014

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	@ (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	@ (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	@ (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	@ (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 fc66 	bl	8004534 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	080045d8 	.word	0x080045d8
 8003c8c:	080045d8 	.word	0x080045d8
 8003c90:	080045d8 	.word	0x080045d8
 8003c94:	080045dc 	.word	0x080045dc

08003c98 <__retarget_lock_acquire_recursive>:
 8003c98:	4770      	bx	lr

08003c9a <__retarget_lock_release_recursive>:
 8003c9a:	4770      	bx	lr

08003c9c <memcpy>:
 8003c9c:	440a      	add	r2, r1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003ca4:	d100      	bne.n	8003ca8 <memcpy+0xc>
 8003ca6:	4770      	bx	lr
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cb2:	4291      	cmp	r1, r2
 8003cb4:	d1f9      	bne.n	8003caa <memcpy+0xe>
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <_free_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4605      	mov	r5, r0
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	d041      	beq.n	8003d44 <_free_r+0x8c>
 8003cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc4:	1f0c      	subs	r4, r1, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bfb8      	it	lt
 8003cca:	18e4      	addlt	r4, r4, r3
 8003ccc:	f000 f8e0 	bl	8003e90 <__malloc_lock>
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <_free_r+0x90>)
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	b933      	cbnz	r3, 8003ce4 <_free_r+0x2c>
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	6014      	str	r4, [r2, #0]
 8003cda:	4628      	mov	r0, r5
 8003cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ce0:	f000 b8dc 	b.w	8003e9c <__malloc_unlock>
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	d908      	bls.n	8003cfa <_free_r+0x42>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	1821      	adds	r1, r4, r0
 8003cec:	428b      	cmp	r3, r1
 8003cee:	bf01      	itttt	eq
 8003cf0:	6819      	ldreq	r1, [r3, #0]
 8003cf2:	685b      	ldreq	r3, [r3, #4]
 8003cf4:	1809      	addeq	r1, r1, r0
 8003cf6:	6021      	streq	r1, [r4, #0]
 8003cf8:	e7ed      	b.n	8003cd6 <_free_r+0x1e>
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b10b      	cbz	r3, 8003d04 <_free_r+0x4c>
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d9fa      	bls.n	8003cfa <_free_r+0x42>
 8003d04:	6811      	ldr	r1, [r2, #0]
 8003d06:	1850      	adds	r0, r2, r1
 8003d08:	42a0      	cmp	r0, r4
 8003d0a:	d10b      	bne.n	8003d24 <_free_r+0x6c>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	4401      	add	r1, r0
 8003d10:	1850      	adds	r0, r2, r1
 8003d12:	4283      	cmp	r3, r0
 8003d14:	6011      	str	r1, [r2, #0]
 8003d16:	d1e0      	bne.n	8003cda <_free_r+0x22>
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	6053      	str	r3, [r2, #4]
 8003d1e:	4408      	add	r0, r1
 8003d20:	6010      	str	r0, [r2, #0]
 8003d22:	e7da      	b.n	8003cda <_free_r+0x22>
 8003d24:	d902      	bls.n	8003d2c <_free_r+0x74>
 8003d26:	230c      	movs	r3, #12
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	e7d6      	b.n	8003cda <_free_r+0x22>
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	1821      	adds	r1, r4, r0
 8003d30:	428b      	cmp	r3, r1
 8003d32:	bf04      	itt	eq
 8003d34:	6819      	ldreq	r1, [r3, #0]
 8003d36:	685b      	ldreq	r3, [r3, #4]
 8003d38:	6063      	str	r3, [r4, #4]
 8003d3a:	bf04      	itt	eq
 8003d3c:	1809      	addeq	r1, r1, r0
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	6054      	str	r4, [r2, #4]
 8003d42:	e7ca      	b.n	8003cda <_free_r+0x22>
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
 8003d46:	bf00      	nop
 8003d48:	20003fb0 	.word	0x20003fb0

08003d4c <sbrk_aligned>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8003d8c <sbrk_aligned+0x40>)
 8003d50:	460c      	mov	r4, r1
 8003d52:	6831      	ldr	r1, [r6, #0]
 8003d54:	4605      	mov	r5, r0
 8003d56:	b911      	cbnz	r1, 8003d5e <sbrk_aligned+0x12>
 8003d58:	f000 fba6 	bl	80044a8 <_sbrk_r>
 8003d5c:	6030      	str	r0, [r6, #0]
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fba1 	bl	80044a8 <_sbrk_r>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	d103      	bne.n	8003d72 <sbrk_aligned+0x26>
 8003d6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003d6e:	4620      	mov	r0, r4
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
 8003d72:	1cc4      	adds	r4, r0, #3
 8003d74:	f024 0403 	bic.w	r4, r4, #3
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d0f8      	beq.n	8003d6e <sbrk_aligned+0x22>
 8003d7c:	1a21      	subs	r1, r4, r0
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fb92 	bl	80044a8 <_sbrk_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d1f2      	bne.n	8003d6e <sbrk_aligned+0x22>
 8003d88:	e7ef      	b.n	8003d6a <sbrk_aligned+0x1e>
 8003d8a:	bf00      	nop
 8003d8c:	20003fac 	.word	0x20003fac

08003d90 <_malloc_r>:
 8003d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d94:	1ccd      	adds	r5, r1, #3
 8003d96:	f025 0503 	bic.w	r5, r5, #3
 8003d9a:	3508      	adds	r5, #8
 8003d9c:	2d0c      	cmp	r5, #12
 8003d9e:	bf38      	it	cc
 8003da0:	250c      	movcc	r5, #12
 8003da2:	2d00      	cmp	r5, #0
 8003da4:	4606      	mov	r6, r0
 8003da6:	db01      	blt.n	8003dac <_malloc_r+0x1c>
 8003da8:	42a9      	cmp	r1, r5
 8003daa:	d904      	bls.n	8003db6 <_malloc_r+0x26>
 8003dac:	230c      	movs	r3, #12
 8003dae:	6033      	str	r3, [r6, #0]
 8003db0:	2000      	movs	r0, #0
 8003db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e8c <_malloc_r+0xfc>
 8003dba:	f000 f869 	bl	8003e90 <__malloc_lock>
 8003dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc2:	461c      	mov	r4, r3
 8003dc4:	bb44      	cbnz	r4, 8003e18 <_malloc_r+0x88>
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f7ff ffbf 	bl	8003d4c <sbrk_aligned>
 8003dce:	1c43      	adds	r3, r0, #1
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	d158      	bne.n	8003e86 <_malloc_r+0xf6>
 8003dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8003dd8:	4627      	mov	r7, r4
 8003dda:	2f00      	cmp	r7, #0
 8003ddc:	d143      	bne.n	8003e66 <_malloc_r+0xd6>
 8003dde:	2c00      	cmp	r4, #0
 8003de0:	d04b      	beq.n	8003e7a <_malloc_r+0xea>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	4639      	mov	r1, r7
 8003de6:	4630      	mov	r0, r6
 8003de8:	eb04 0903 	add.w	r9, r4, r3
 8003dec:	f000 fb5c 	bl	80044a8 <_sbrk_r>
 8003df0:	4581      	cmp	r9, r0
 8003df2:	d142      	bne.n	8003e7a <_malloc_r+0xea>
 8003df4:	6821      	ldr	r1, [r4, #0]
 8003df6:	1a6d      	subs	r5, r5, r1
 8003df8:	4629      	mov	r1, r5
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f7ff ffa6 	bl	8003d4c <sbrk_aligned>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d03a      	beq.n	8003e7a <_malloc_r+0xea>
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	442b      	add	r3, r5
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	bb62      	cbnz	r2, 8003e6c <_malloc_r+0xdc>
 8003e12:	f8c8 7000 	str.w	r7, [r8]
 8003e16:	e00f      	b.n	8003e38 <_malloc_r+0xa8>
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	1b52      	subs	r2, r2, r5
 8003e1c:	d420      	bmi.n	8003e60 <_malloc_r+0xd0>
 8003e1e:	2a0b      	cmp	r2, #11
 8003e20:	d917      	bls.n	8003e52 <_malloc_r+0xc2>
 8003e22:	1961      	adds	r1, r4, r5
 8003e24:	42a3      	cmp	r3, r4
 8003e26:	6025      	str	r5, [r4, #0]
 8003e28:	bf18      	it	ne
 8003e2a:	6059      	strne	r1, [r3, #4]
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	bf08      	it	eq
 8003e30:	f8c8 1000 	streq.w	r1, [r8]
 8003e34:	5162      	str	r2, [r4, r5]
 8003e36:	604b      	str	r3, [r1, #4]
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 f82f 	bl	8003e9c <__malloc_unlock>
 8003e3e:	f104 000b 	add.w	r0, r4, #11
 8003e42:	1d23      	adds	r3, r4, #4
 8003e44:	f020 0007 	bic.w	r0, r0, #7
 8003e48:	1ac2      	subs	r2, r0, r3
 8003e4a:	bf1c      	itt	ne
 8003e4c:	1a1b      	subne	r3, r3, r0
 8003e4e:	50a3      	strne	r3, [r4, r2]
 8003e50:	e7af      	b.n	8003db2 <_malloc_r+0x22>
 8003e52:	6862      	ldr	r2, [r4, #4]
 8003e54:	42a3      	cmp	r3, r4
 8003e56:	bf0c      	ite	eq
 8003e58:	f8c8 2000 	streq.w	r2, [r8]
 8003e5c:	605a      	strne	r2, [r3, #4]
 8003e5e:	e7eb      	b.n	8003e38 <_malloc_r+0xa8>
 8003e60:	4623      	mov	r3, r4
 8003e62:	6864      	ldr	r4, [r4, #4]
 8003e64:	e7ae      	b.n	8003dc4 <_malloc_r+0x34>
 8003e66:	463c      	mov	r4, r7
 8003e68:	687f      	ldr	r7, [r7, #4]
 8003e6a:	e7b6      	b.n	8003dda <_malloc_r+0x4a>
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	d1fb      	bne.n	8003e6c <_malloc_r+0xdc>
 8003e74:	2300      	movs	r3, #0
 8003e76:	6053      	str	r3, [r2, #4]
 8003e78:	e7de      	b.n	8003e38 <_malloc_r+0xa8>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	6033      	str	r3, [r6, #0]
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f000 f80c 	bl	8003e9c <__malloc_unlock>
 8003e84:	e794      	b.n	8003db0 <_malloc_r+0x20>
 8003e86:	6005      	str	r5, [r0, #0]
 8003e88:	e7d6      	b.n	8003e38 <_malloc_r+0xa8>
 8003e8a:	bf00      	nop
 8003e8c:	20003fb0 	.word	0x20003fb0

08003e90 <__malloc_lock>:
 8003e90:	4801      	ldr	r0, [pc, #4]	@ (8003e98 <__malloc_lock+0x8>)
 8003e92:	f7ff bf01 	b.w	8003c98 <__retarget_lock_acquire_recursive>
 8003e96:	bf00      	nop
 8003e98:	20003fa8 	.word	0x20003fa8

08003e9c <__malloc_unlock>:
 8003e9c:	4801      	ldr	r0, [pc, #4]	@ (8003ea4 <__malloc_unlock+0x8>)
 8003e9e:	f7ff befc 	b.w	8003c9a <__retarget_lock_release_recursive>
 8003ea2:	bf00      	nop
 8003ea4:	20003fa8 	.word	0x20003fa8

08003ea8 <__ssputs_r>:
 8003ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eac:	688e      	ldr	r6, [r1, #8]
 8003eae:	461f      	mov	r7, r3
 8003eb0:	42be      	cmp	r6, r7
 8003eb2:	680b      	ldr	r3, [r1, #0]
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	4690      	mov	r8, r2
 8003eba:	d82d      	bhi.n	8003f18 <__ssputs_r+0x70>
 8003ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ec4:	d026      	beq.n	8003f14 <__ssputs_r+0x6c>
 8003ec6:	6965      	ldr	r5, [r4, #20]
 8003ec8:	6909      	ldr	r1, [r1, #16]
 8003eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ece:	eba3 0901 	sub.w	r9, r3, r1
 8003ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ed6:	1c7b      	adds	r3, r7, #1
 8003ed8:	444b      	add	r3, r9
 8003eda:	106d      	asrs	r5, r5, #1
 8003edc:	429d      	cmp	r5, r3
 8003ede:	bf38      	it	cc
 8003ee0:	461d      	movcc	r5, r3
 8003ee2:	0553      	lsls	r3, r2, #21
 8003ee4:	d527      	bpl.n	8003f36 <__ssputs_r+0x8e>
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7ff ff52 	bl	8003d90 <_malloc_r>
 8003eec:	4606      	mov	r6, r0
 8003eee:	b360      	cbz	r0, 8003f4a <__ssputs_r+0xa2>
 8003ef0:	6921      	ldr	r1, [r4, #16]
 8003ef2:	464a      	mov	r2, r9
 8003ef4:	f7ff fed2 	bl	8003c9c <memcpy>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f02:	81a3      	strh	r3, [r4, #12]
 8003f04:	6126      	str	r6, [r4, #16]
 8003f06:	6165      	str	r5, [r4, #20]
 8003f08:	444e      	add	r6, r9
 8003f0a:	eba5 0509 	sub.w	r5, r5, r9
 8003f0e:	6026      	str	r6, [r4, #0]
 8003f10:	60a5      	str	r5, [r4, #8]
 8003f12:	463e      	mov	r6, r7
 8003f14:	42be      	cmp	r6, r7
 8003f16:	d900      	bls.n	8003f1a <__ssputs_r+0x72>
 8003f18:	463e      	mov	r6, r7
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	4641      	mov	r1, r8
 8003f20:	f000 faa8 	bl	8004474 <memmove>
 8003f24:	68a3      	ldr	r3, [r4, #8]
 8003f26:	1b9b      	subs	r3, r3, r6
 8003f28:	60a3      	str	r3, [r4, #8]
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	4433      	add	r3, r6
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	2000      	movs	r0, #0
 8003f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f36:	462a      	mov	r2, r5
 8003f38:	f000 fac6 	bl	80044c8 <_realloc_r>
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d1e0      	bne.n	8003f04 <__ssputs_r+0x5c>
 8003f42:	6921      	ldr	r1, [r4, #16]
 8003f44:	4650      	mov	r0, sl
 8003f46:	f7ff feb7 	bl	8003cb8 <_free_r>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	f8ca 3000 	str.w	r3, [sl]
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f5c:	e7e9      	b.n	8003f32 <__ssputs_r+0x8a>
	...

08003f60 <_svfiprintf_r>:
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	4698      	mov	r8, r3
 8003f66:	898b      	ldrh	r3, [r1, #12]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	b09d      	sub	sp, #116	@ 0x74
 8003f6c:	4607      	mov	r7, r0
 8003f6e:	460d      	mov	r5, r1
 8003f70:	4614      	mov	r4, r2
 8003f72:	d510      	bpl.n	8003f96 <_svfiprintf_r+0x36>
 8003f74:	690b      	ldr	r3, [r1, #16]
 8003f76:	b973      	cbnz	r3, 8003f96 <_svfiprintf_r+0x36>
 8003f78:	2140      	movs	r1, #64	@ 0x40
 8003f7a:	f7ff ff09 	bl	8003d90 <_malloc_r>
 8003f7e:	6028      	str	r0, [r5, #0]
 8003f80:	6128      	str	r0, [r5, #16]
 8003f82:	b930      	cbnz	r0, 8003f92 <_svfiprintf_r+0x32>
 8003f84:	230c      	movs	r3, #12
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f8c:	b01d      	add	sp, #116	@ 0x74
 8003f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f92:	2340      	movs	r3, #64	@ 0x40
 8003f94:	616b      	str	r3, [r5, #20]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fa4:	2330      	movs	r3, #48	@ 0x30
 8003fa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004144 <_svfiprintf_r+0x1e4>
 8003faa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fae:	f04f 0901 	mov.w	r9, #1
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	469a      	mov	sl, r3
 8003fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fba:	b10a      	cbz	r2, 8003fc0 <_svfiprintf_r+0x60>
 8003fbc:	2a25      	cmp	r2, #37	@ 0x25
 8003fbe:	d1f9      	bne.n	8003fb4 <_svfiprintf_r+0x54>
 8003fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fc4:	d00b      	beq.n	8003fde <_svfiprintf_r+0x7e>
 8003fc6:	465b      	mov	r3, fp
 8003fc8:	4622      	mov	r2, r4
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f7ff ff6b 	bl	8003ea8 <__ssputs_r>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	f000 80a7 	beq.w	8004126 <_svfiprintf_r+0x1c6>
 8003fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fda:	445a      	add	r2, fp
 8003fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fde:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 809f 	beq.w	8004126 <_svfiprintf_r+0x1c6>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ff2:	f10a 0a01 	add.w	sl, sl, #1
 8003ff6:	9304      	str	r3, [sp, #16]
 8003ff8:	9307      	str	r3, [sp, #28]
 8003ffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004000:	4654      	mov	r4, sl
 8004002:	2205      	movs	r2, #5
 8004004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004008:	484e      	ldr	r0, [pc, #312]	@ (8004144 <_svfiprintf_r+0x1e4>)
 800400a:	f7fc f8e9 	bl	80001e0 <memchr>
 800400e:	9a04      	ldr	r2, [sp, #16]
 8004010:	b9d8      	cbnz	r0, 800404a <_svfiprintf_r+0xea>
 8004012:	06d0      	lsls	r0, r2, #27
 8004014:	bf44      	itt	mi
 8004016:	2320      	movmi	r3, #32
 8004018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800401c:	0711      	lsls	r1, r2, #28
 800401e:	bf44      	itt	mi
 8004020:	232b      	movmi	r3, #43	@ 0x2b
 8004022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004026:	f89a 3000 	ldrb.w	r3, [sl]
 800402a:	2b2a      	cmp	r3, #42	@ 0x2a
 800402c:	d015      	beq.n	800405a <_svfiprintf_r+0xfa>
 800402e:	9a07      	ldr	r2, [sp, #28]
 8004030:	4654      	mov	r4, sl
 8004032:	2000      	movs	r0, #0
 8004034:	f04f 0c0a 	mov.w	ip, #10
 8004038:	4621      	mov	r1, r4
 800403a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800403e:	3b30      	subs	r3, #48	@ 0x30
 8004040:	2b09      	cmp	r3, #9
 8004042:	d94b      	bls.n	80040dc <_svfiprintf_r+0x17c>
 8004044:	b1b0      	cbz	r0, 8004074 <_svfiprintf_r+0x114>
 8004046:	9207      	str	r2, [sp, #28]
 8004048:	e014      	b.n	8004074 <_svfiprintf_r+0x114>
 800404a:	eba0 0308 	sub.w	r3, r0, r8
 800404e:	fa09 f303 	lsl.w	r3, r9, r3
 8004052:	4313      	orrs	r3, r2
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	46a2      	mov	sl, r4
 8004058:	e7d2      	b.n	8004000 <_svfiprintf_r+0xa0>
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	1d19      	adds	r1, r3, #4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	9103      	str	r1, [sp, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	bfbb      	ittet	lt
 8004066:	425b      	neglt	r3, r3
 8004068:	f042 0202 	orrlt.w	r2, r2, #2
 800406c:	9307      	strge	r3, [sp, #28]
 800406e:	9307      	strlt	r3, [sp, #28]
 8004070:	bfb8      	it	lt
 8004072:	9204      	strlt	r2, [sp, #16]
 8004074:	7823      	ldrb	r3, [r4, #0]
 8004076:	2b2e      	cmp	r3, #46	@ 0x2e
 8004078:	d10a      	bne.n	8004090 <_svfiprintf_r+0x130>
 800407a:	7863      	ldrb	r3, [r4, #1]
 800407c:	2b2a      	cmp	r3, #42	@ 0x2a
 800407e:	d132      	bne.n	80040e6 <_svfiprintf_r+0x186>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	1d1a      	adds	r2, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	9203      	str	r2, [sp, #12]
 8004088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800408c:	3402      	adds	r4, #2
 800408e:	9305      	str	r3, [sp, #20]
 8004090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004154 <_svfiprintf_r+0x1f4>
 8004094:	7821      	ldrb	r1, [r4, #0]
 8004096:	2203      	movs	r2, #3
 8004098:	4650      	mov	r0, sl
 800409a:	f7fc f8a1 	bl	80001e0 <memchr>
 800409e:	b138      	cbz	r0, 80040b0 <_svfiprintf_r+0x150>
 80040a0:	9b04      	ldr	r3, [sp, #16]
 80040a2:	eba0 000a 	sub.w	r0, r0, sl
 80040a6:	2240      	movs	r2, #64	@ 0x40
 80040a8:	4082      	lsls	r2, r0
 80040aa:	4313      	orrs	r3, r2
 80040ac:	3401      	adds	r4, #1
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b4:	4824      	ldr	r0, [pc, #144]	@ (8004148 <_svfiprintf_r+0x1e8>)
 80040b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040ba:	2206      	movs	r2, #6
 80040bc:	f7fc f890 	bl	80001e0 <memchr>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d036      	beq.n	8004132 <_svfiprintf_r+0x1d2>
 80040c4:	4b21      	ldr	r3, [pc, #132]	@ (800414c <_svfiprintf_r+0x1ec>)
 80040c6:	bb1b      	cbnz	r3, 8004110 <_svfiprintf_r+0x1b0>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	3307      	adds	r3, #7
 80040cc:	f023 0307 	bic.w	r3, r3, #7
 80040d0:	3308      	adds	r3, #8
 80040d2:	9303      	str	r3, [sp, #12]
 80040d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d6:	4433      	add	r3, r6
 80040d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040da:	e76a      	b.n	8003fb2 <_svfiprintf_r+0x52>
 80040dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80040e0:	460c      	mov	r4, r1
 80040e2:	2001      	movs	r0, #1
 80040e4:	e7a8      	b.n	8004038 <_svfiprintf_r+0xd8>
 80040e6:	2300      	movs	r3, #0
 80040e8:	3401      	adds	r4, #1
 80040ea:	9305      	str	r3, [sp, #20]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f04f 0c0a 	mov.w	ip, #10
 80040f2:	4620      	mov	r0, r4
 80040f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f8:	3a30      	subs	r2, #48	@ 0x30
 80040fa:	2a09      	cmp	r2, #9
 80040fc:	d903      	bls.n	8004106 <_svfiprintf_r+0x1a6>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0c6      	beq.n	8004090 <_svfiprintf_r+0x130>
 8004102:	9105      	str	r1, [sp, #20]
 8004104:	e7c4      	b.n	8004090 <_svfiprintf_r+0x130>
 8004106:	fb0c 2101 	mla	r1, ip, r1, r2
 800410a:	4604      	mov	r4, r0
 800410c:	2301      	movs	r3, #1
 800410e:	e7f0      	b.n	80040f2 <_svfiprintf_r+0x192>
 8004110:	ab03      	add	r3, sp, #12
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	462a      	mov	r2, r5
 8004116:	4b0e      	ldr	r3, [pc, #56]	@ (8004150 <_svfiprintf_r+0x1f0>)
 8004118:	a904      	add	r1, sp, #16
 800411a:	4638      	mov	r0, r7
 800411c:	f3af 8000 	nop.w
 8004120:	1c42      	adds	r2, r0, #1
 8004122:	4606      	mov	r6, r0
 8004124:	d1d6      	bne.n	80040d4 <_svfiprintf_r+0x174>
 8004126:	89ab      	ldrh	r3, [r5, #12]
 8004128:	065b      	lsls	r3, r3, #25
 800412a:	f53f af2d 	bmi.w	8003f88 <_svfiprintf_r+0x28>
 800412e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004130:	e72c      	b.n	8003f8c <_svfiprintf_r+0x2c>
 8004132:	ab03      	add	r3, sp, #12
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	462a      	mov	r2, r5
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <_svfiprintf_r+0x1f0>)
 800413a:	a904      	add	r1, sp, #16
 800413c:	4638      	mov	r0, r7
 800413e:	f000 f879 	bl	8004234 <_printf_i>
 8004142:	e7ed      	b.n	8004120 <_svfiprintf_r+0x1c0>
 8004144:	0800459c 	.word	0x0800459c
 8004148:	080045a6 	.word	0x080045a6
 800414c:	00000000 	.word	0x00000000
 8004150:	08003ea9 	.word	0x08003ea9
 8004154:	080045a2 	.word	0x080045a2

08004158 <_printf_common>:
 8004158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800415c:	4616      	mov	r6, r2
 800415e:	4698      	mov	r8, r3
 8004160:	688a      	ldr	r2, [r1, #8]
 8004162:	690b      	ldr	r3, [r1, #16]
 8004164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004168:	4293      	cmp	r3, r2
 800416a:	bfb8      	it	lt
 800416c:	4613      	movlt	r3, r2
 800416e:	6033      	str	r3, [r6, #0]
 8004170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004174:	4607      	mov	r7, r0
 8004176:	460c      	mov	r4, r1
 8004178:	b10a      	cbz	r2, 800417e <_printf_common+0x26>
 800417a:	3301      	adds	r3, #1
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	0699      	lsls	r1, r3, #26
 8004182:	bf42      	ittt	mi
 8004184:	6833      	ldrmi	r3, [r6, #0]
 8004186:	3302      	addmi	r3, #2
 8004188:	6033      	strmi	r3, [r6, #0]
 800418a:	6825      	ldr	r5, [r4, #0]
 800418c:	f015 0506 	ands.w	r5, r5, #6
 8004190:	d106      	bne.n	80041a0 <_printf_common+0x48>
 8004192:	f104 0a19 	add.w	sl, r4, #25
 8004196:	68e3      	ldr	r3, [r4, #12]
 8004198:	6832      	ldr	r2, [r6, #0]
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	42ab      	cmp	r3, r5
 800419e:	dc26      	bgt.n	80041ee <_printf_common+0x96>
 80041a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	3b00      	subs	r3, #0
 80041a8:	bf18      	it	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	0692      	lsls	r2, r2, #26
 80041ae:	d42b      	bmi.n	8004208 <_printf_common+0xb0>
 80041b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041b4:	4641      	mov	r1, r8
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c8      	blx	r9
 80041ba:	3001      	adds	r0, #1
 80041bc:	d01e      	beq.n	80041fc <_printf_common+0xa4>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	6922      	ldr	r2, [r4, #16]
 80041c2:	f003 0306 	and.w	r3, r3, #6
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	bf02      	ittt	eq
 80041ca:	68e5      	ldreq	r5, [r4, #12]
 80041cc:	6833      	ldreq	r3, [r6, #0]
 80041ce:	1aed      	subeq	r5, r5, r3
 80041d0:	68a3      	ldr	r3, [r4, #8]
 80041d2:	bf0c      	ite	eq
 80041d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d8:	2500      	movne	r5, #0
 80041da:	4293      	cmp	r3, r2
 80041dc:	bfc4      	itt	gt
 80041de:	1a9b      	subgt	r3, r3, r2
 80041e0:	18ed      	addgt	r5, r5, r3
 80041e2:	2600      	movs	r6, #0
 80041e4:	341a      	adds	r4, #26
 80041e6:	42b5      	cmp	r5, r6
 80041e8:	d11a      	bne.n	8004220 <_printf_common+0xc8>
 80041ea:	2000      	movs	r0, #0
 80041ec:	e008      	b.n	8004200 <_printf_common+0xa8>
 80041ee:	2301      	movs	r3, #1
 80041f0:	4652      	mov	r2, sl
 80041f2:	4641      	mov	r1, r8
 80041f4:	4638      	mov	r0, r7
 80041f6:	47c8      	blx	r9
 80041f8:	3001      	adds	r0, #1
 80041fa:	d103      	bne.n	8004204 <_printf_common+0xac>
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	3501      	adds	r5, #1
 8004206:	e7c6      	b.n	8004196 <_printf_common+0x3e>
 8004208:	18e1      	adds	r1, r4, r3
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	2030      	movs	r0, #48	@ 0x30
 800420e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004212:	4422      	add	r2, r4
 8004214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800421c:	3302      	adds	r3, #2
 800421e:	e7c7      	b.n	80041b0 <_printf_common+0x58>
 8004220:	2301      	movs	r3, #1
 8004222:	4622      	mov	r2, r4
 8004224:	4641      	mov	r1, r8
 8004226:	4638      	mov	r0, r7
 8004228:	47c8      	blx	r9
 800422a:	3001      	adds	r0, #1
 800422c:	d0e6      	beq.n	80041fc <_printf_common+0xa4>
 800422e:	3601      	adds	r6, #1
 8004230:	e7d9      	b.n	80041e6 <_printf_common+0x8e>
	...

08004234 <_printf_i>:
 8004234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	7e0f      	ldrb	r7, [r1, #24]
 800423a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800423c:	2f78      	cmp	r7, #120	@ 0x78
 800423e:	4691      	mov	r9, r2
 8004240:	4680      	mov	r8, r0
 8004242:	460c      	mov	r4, r1
 8004244:	469a      	mov	sl, r3
 8004246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800424a:	d807      	bhi.n	800425c <_printf_i+0x28>
 800424c:	2f62      	cmp	r7, #98	@ 0x62
 800424e:	d80a      	bhi.n	8004266 <_printf_i+0x32>
 8004250:	2f00      	cmp	r7, #0
 8004252:	f000 80d2 	beq.w	80043fa <_printf_i+0x1c6>
 8004256:	2f58      	cmp	r7, #88	@ 0x58
 8004258:	f000 80b9 	beq.w	80043ce <_printf_i+0x19a>
 800425c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004264:	e03a      	b.n	80042dc <_printf_i+0xa8>
 8004266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800426a:	2b15      	cmp	r3, #21
 800426c:	d8f6      	bhi.n	800425c <_printf_i+0x28>
 800426e:	a101      	add	r1, pc, #4	@ (adr r1, 8004274 <_printf_i+0x40>)
 8004270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004274:	080042cd 	.word	0x080042cd
 8004278:	080042e1 	.word	0x080042e1
 800427c:	0800425d 	.word	0x0800425d
 8004280:	0800425d 	.word	0x0800425d
 8004284:	0800425d 	.word	0x0800425d
 8004288:	0800425d 	.word	0x0800425d
 800428c:	080042e1 	.word	0x080042e1
 8004290:	0800425d 	.word	0x0800425d
 8004294:	0800425d 	.word	0x0800425d
 8004298:	0800425d 	.word	0x0800425d
 800429c:	0800425d 	.word	0x0800425d
 80042a0:	080043e1 	.word	0x080043e1
 80042a4:	0800430b 	.word	0x0800430b
 80042a8:	0800439b 	.word	0x0800439b
 80042ac:	0800425d 	.word	0x0800425d
 80042b0:	0800425d 	.word	0x0800425d
 80042b4:	08004403 	.word	0x08004403
 80042b8:	0800425d 	.word	0x0800425d
 80042bc:	0800430b 	.word	0x0800430b
 80042c0:	0800425d 	.word	0x0800425d
 80042c4:	0800425d 	.word	0x0800425d
 80042c8:	080043a3 	.word	0x080043a3
 80042cc:	6833      	ldr	r3, [r6, #0]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6032      	str	r2, [r6, #0]
 80042d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042dc:	2301      	movs	r3, #1
 80042de:	e09d      	b.n	800441c <_printf_i+0x1e8>
 80042e0:	6833      	ldr	r3, [r6, #0]
 80042e2:	6820      	ldr	r0, [r4, #0]
 80042e4:	1d19      	adds	r1, r3, #4
 80042e6:	6031      	str	r1, [r6, #0]
 80042e8:	0606      	lsls	r6, r0, #24
 80042ea:	d501      	bpl.n	80042f0 <_printf_i+0xbc>
 80042ec:	681d      	ldr	r5, [r3, #0]
 80042ee:	e003      	b.n	80042f8 <_printf_i+0xc4>
 80042f0:	0645      	lsls	r5, r0, #25
 80042f2:	d5fb      	bpl.n	80042ec <_printf_i+0xb8>
 80042f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	da03      	bge.n	8004304 <_printf_i+0xd0>
 80042fc:	232d      	movs	r3, #45	@ 0x2d
 80042fe:	426d      	negs	r5, r5
 8004300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004304:	4859      	ldr	r0, [pc, #356]	@ (800446c <_printf_i+0x238>)
 8004306:	230a      	movs	r3, #10
 8004308:	e011      	b.n	800432e <_printf_i+0xfa>
 800430a:	6821      	ldr	r1, [r4, #0]
 800430c:	6833      	ldr	r3, [r6, #0]
 800430e:	0608      	lsls	r0, r1, #24
 8004310:	f853 5b04 	ldr.w	r5, [r3], #4
 8004314:	d402      	bmi.n	800431c <_printf_i+0xe8>
 8004316:	0649      	lsls	r1, r1, #25
 8004318:	bf48      	it	mi
 800431a:	b2ad      	uxthmi	r5, r5
 800431c:	2f6f      	cmp	r7, #111	@ 0x6f
 800431e:	4853      	ldr	r0, [pc, #332]	@ (800446c <_printf_i+0x238>)
 8004320:	6033      	str	r3, [r6, #0]
 8004322:	bf14      	ite	ne
 8004324:	230a      	movne	r3, #10
 8004326:	2308      	moveq	r3, #8
 8004328:	2100      	movs	r1, #0
 800432a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800432e:	6866      	ldr	r6, [r4, #4]
 8004330:	60a6      	str	r6, [r4, #8]
 8004332:	2e00      	cmp	r6, #0
 8004334:	bfa2      	ittt	ge
 8004336:	6821      	ldrge	r1, [r4, #0]
 8004338:	f021 0104 	bicge.w	r1, r1, #4
 800433c:	6021      	strge	r1, [r4, #0]
 800433e:	b90d      	cbnz	r5, 8004344 <_printf_i+0x110>
 8004340:	2e00      	cmp	r6, #0
 8004342:	d04b      	beq.n	80043dc <_printf_i+0x1a8>
 8004344:	4616      	mov	r6, r2
 8004346:	fbb5 f1f3 	udiv	r1, r5, r3
 800434a:	fb03 5711 	mls	r7, r3, r1, r5
 800434e:	5dc7      	ldrb	r7, [r0, r7]
 8004350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004354:	462f      	mov	r7, r5
 8004356:	42bb      	cmp	r3, r7
 8004358:	460d      	mov	r5, r1
 800435a:	d9f4      	bls.n	8004346 <_printf_i+0x112>
 800435c:	2b08      	cmp	r3, #8
 800435e:	d10b      	bne.n	8004378 <_printf_i+0x144>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07df      	lsls	r7, r3, #31
 8004364:	d508      	bpl.n	8004378 <_printf_i+0x144>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	6861      	ldr	r1, [r4, #4]
 800436a:	4299      	cmp	r1, r3
 800436c:	bfde      	ittt	le
 800436e:	2330      	movle	r3, #48	@ 0x30
 8004370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004374:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004378:	1b92      	subs	r2, r2, r6
 800437a:	6122      	str	r2, [r4, #16]
 800437c:	f8cd a000 	str.w	sl, [sp]
 8004380:	464b      	mov	r3, r9
 8004382:	aa03      	add	r2, sp, #12
 8004384:	4621      	mov	r1, r4
 8004386:	4640      	mov	r0, r8
 8004388:	f7ff fee6 	bl	8004158 <_printf_common>
 800438c:	3001      	adds	r0, #1
 800438e:	d14a      	bne.n	8004426 <_printf_i+0x1f2>
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004394:	b004      	add	sp, #16
 8004396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	4833      	ldr	r0, [pc, #204]	@ (8004470 <_printf_i+0x23c>)
 80043a4:	2778      	movs	r7, #120	@ 0x78
 80043a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6831      	ldr	r1, [r6, #0]
 80043ae:	061f      	lsls	r7, r3, #24
 80043b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80043b4:	d402      	bmi.n	80043bc <_printf_i+0x188>
 80043b6:	065f      	lsls	r7, r3, #25
 80043b8:	bf48      	it	mi
 80043ba:	b2ad      	uxthmi	r5, r5
 80043bc:	6031      	str	r1, [r6, #0]
 80043be:	07d9      	lsls	r1, r3, #31
 80043c0:	bf44      	itt	mi
 80043c2:	f043 0320 	orrmi.w	r3, r3, #32
 80043c6:	6023      	strmi	r3, [r4, #0]
 80043c8:	b11d      	cbz	r5, 80043d2 <_printf_i+0x19e>
 80043ca:	2310      	movs	r3, #16
 80043cc:	e7ac      	b.n	8004328 <_printf_i+0xf4>
 80043ce:	4827      	ldr	r0, [pc, #156]	@ (800446c <_printf_i+0x238>)
 80043d0:	e7e9      	b.n	80043a6 <_printf_i+0x172>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f023 0320 	bic.w	r3, r3, #32
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	e7f6      	b.n	80043ca <_printf_i+0x196>
 80043dc:	4616      	mov	r6, r2
 80043de:	e7bd      	b.n	800435c <_printf_i+0x128>
 80043e0:	6833      	ldr	r3, [r6, #0]
 80043e2:	6825      	ldr	r5, [r4, #0]
 80043e4:	6961      	ldr	r1, [r4, #20]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6030      	str	r0, [r6, #0]
 80043ea:	062e      	lsls	r6, r5, #24
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	d501      	bpl.n	80043f4 <_printf_i+0x1c0>
 80043f0:	6019      	str	r1, [r3, #0]
 80043f2:	e002      	b.n	80043fa <_printf_i+0x1c6>
 80043f4:	0668      	lsls	r0, r5, #25
 80043f6:	d5fb      	bpl.n	80043f0 <_printf_i+0x1bc>
 80043f8:	8019      	strh	r1, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	4616      	mov	r6, r2
 8004400:	e7bc      	b.n	800437c <_printf_i+0x148>
 8004402:	6833      	ldr	r3, [r6, #0]
 8004404:	1d1a      	adds	r2, r3, #4
 8004406:	6032      	str	r2, [r6, #0]
 8004408:	681e      	ldr	r6, [r3, #0]
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	2100      	movs	r1, #0
 800440e:	4630      	mov	r0, r6
 8004410:	f7fb fee6 	bl	80001e0 <memchr>
 8004414:	b108      	cbz	r0, 800441a <_printf_i+0x1e6>
 8004416:	1b80      	subs	r0, r0, r6
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	2300      	movs	r3, #0
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004424:	e7aa      	b.n	800437c <_printf_i+0x148>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	4632      	mov	r2, r6
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d0ad      	beq.n	8004390 <_printf_i+0x15c>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	d413      	bmi.n	8004462 <_printf_i+0x22e>
 800443a:	68e0      	ldr	r0, [r4, #12]
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	4298      	cmp	r0, r3
 8004440:	bfb8      	it	lt
 8004442:	4618      	movlt	r0, r3
 8004444:	e7a6      	b.n	8004394 <_printf_i+0x160>
 8004446:	2301      	movs	r3, #1
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	47d0      	blx	sl
 8004450:	3001      	adds	r0, #1
 8004452:	d09d      	beq.n	8004390 <_printf_i+0x15c>
 8004454:	3501      	adds	r5, #1
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	9903      	ldr	r1, [sp, #12]
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	42ab      	cmp	r3, r5
 800445e:	dcf2      	bgt.n	8004446 <_printf_i+0x212>
 8004460:	e7eb      	b.n	800443a <_printf_i+0x206>
 8004462:	2500      	movs	r5, #0
 8004464:	f104 0619 	add.w	r6, r4, #25
 8004468:	e7f5      	b.n	8004456 <_printf_i+0x222>
 800446a:	bf00      	nop
 800446c:	080045ad 	.word	0x080045ad
 8004470:	080045be 	.word	0x080045be

08004474 <memmove>:
 8004474:	4288      	cmp	r0, r1
 8004476:	b510      	push	{r4, lr}
 8004478:	eb01 0402 	add.w	r4, r1, r2
 800447c:	d902      	bls.n	8004484 <memmove+0x10>
 800447e:	4284      	cmp	r4, r0
 8004480:	4623      	mov	r3, r4
 8004482:	d807      	bhi.n	8004494 <memmove+0x20>
 8004484:	1e43      	subs	r3, r0, #1
 8004486:	42a1      	cmp	r1, r4
 8004488:	d008      	beq.n	800449c <memmove+0x28>
 800448a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800448e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004492:	e7f8      	b.n	8004486 <memmove+0x12>
 8004494:	4402      	add	r2, r0
 8004496:	4601      	mov	r1, r0
 8004498:	428a      	cmp	r2, r1
 800449a:	d100      	bne.n	800449e <memmove+0x2a>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044a6:	e7f7      	b.n	8004498 <memmove+0x24>

080044a8 <_sbrk_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d06      	ldr	r5, [pc, #24]	@ (80044c4 <_sbrk_r+0x1c>)
 80044ac:	2300      	movs	r3, #0
 80044ae:	4604      	mov	r4, r0
 80044b0:	4608      	mov	r0, r1
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	f7fc fac0 	bl	8000a38 <_sbrk>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_sbrk_r+0x1a>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_sbrk_r+0x1a>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20003fa4 	.word	0x20003fa4

080044c8 <_realloc_r>:
 80044c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044cc:	4680      	mov	r8, r0
 80044ce:	4615      	mov	r5, r2
 80044d0:	460c      	mov	r4, r1
 80044d2:	b921      	cbnz	r1, 80044de <_realloc_r+0x16>
 80044d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d8:	4611      	mov	r1, r2
 80044da:	f7ff bc59 	b.w	8003d90 <_malloc_r>
 80044de:	b92a      	cbnz	r2, 80044ec <_realloc_r+0x24>
 80044e0:	f7ff fbea 	bl	8003cb8 <_free_r>
 80044e4:	2400      	movs	r4, #0
 80044e6:	4620      	mov	r0, r4
 80044e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ec:	f000 f81a 	bl	8004524 <_malloc_usable_size_r>
 80044f0:	4285      	cmp	r5, r0
 80044f2:	4606      	mov	r6, r0
 80044f4:	d802      	bhi.n	80044fc <_realloc_r+0x34>
 80044f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044fa:	d8f4      	bhi.n	80044e6 <_realloc_r+0x1e>
 80044fc:	4629      	mov	r1, r5
 80044fe:	4640      	mov	r0, r8
 8004500:	f7ff fc46 	bl	8003d90 <_malloc_r>
 8004504:	4607      	mov	r7, r0
 8004506:	2800      	cmp	r0, #0
 8004508:	d0ec      	beq.n	80044e4 <_realloc_r+0x1c>
 800450a:	42b5      	cmp	r5, r6
 800450c:	462a      	mov	r2, r5
 800450e:	4621      	mov	r1, r4
 8004510:	bf28      	it	cs
 8004512:	4632      	movcs	r2, r6
 8004514:	f7ff fbc2 	bl	8003c9c <memcpy>
 8004518:	4621      	mov	r1, r4
 800451a:	4640      	mov	r0, r8
 800451c:	f7ff fbcc 	bl	8003cb8 <_free_r>
 8004520:	463c      	mov	r4, r7
 8004522:	e7e0      	b.n	80044e6 <_realloc_r+0x1e>

08004524 <_malloc_usable_size_r>:
 8004524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004528:	1f18      	subs	r0, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfbc      	itt	lt
 800452e:	580b      	ldrlt	r3, [r1, r0]
 8004530:	18c0      	addlt	r0, r0, r3
 8004532:	4770      	bx	lr

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
